{
  "api/OpenCollar.Extensions.Configuration.Implementation.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Implementation.html",
    "title": "Class Implementation | API Documentation",
    "keywords": "Class Implementation The details of the implementation of a property or element. Inheritance System.Object Implementation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public sealed class Implementation Properties | Improve this Doc View Source ImplementationKind Gets the kind of the implementation to use to instantiate values. Declaration public ImplementationKind ImplementationKind { get; } Property Value Type Description ImplementationKind The kind of the implementation to use to instantiate values. | Improve this Doc View Source ImplementationType Gets the type of the object that implements values ( null if the property is naive). Declaration public Type ImplementationType { get; } Property Value Type Description System.Type The type of the object that implements values ( null if the property is naive). | Improve this Doc View Source Type Gets the type of the value represented (the type of the property). Declaration public Type Type { get; } Property Value Type Description System.Type The type of the value represented (the type of the property)."
  },
  "api/OpenCollar.Extensions.Configuration.NotifyPropertyChanged.html": {
    "href": "api/OpenCollar.Extensions.Configuration.NotifyPropertyChanged.html",
    "title": "Class NotifyPropertyChanged | API Documentation",
    "keywords": "Class NotifyPropertyChanged A base class providing an implementation of the System.ComponentModel.INotifyPropertyChanged interface (and the System.IDisposable interface. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationDictionaryBase<TKey, TElement> ConfigurationObjectBase Implements System.IDisposable System.ComponentModel.INotifyPropertyChanged Inherited Members Disposable.IsDisposed Disposable.Dispose() Disposable.Dispose(Boolean) Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public abstract class NotifyPropertyChanged : Disposable, IDisposable, INotifyPropertyChanged Methods | Improve this Doc View Source DisablePropertyChangedEvents() Disables the firing of the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event on the current thread. Declaration protected void DisablePropertyChangedEvents() | Improve this Doc View Source EnablePropertyChangedEvents() Enables the firing of the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event on the current thread. Declaration protected void EnablePropertyChangedEvents() | Improve this Doc View Source OnPropertyChanged(String) Called when an underlying property has been changed. Declaration protected void OnPropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName The name of the property that has changed. Exceptions Type Condition System.AggregateException One or more change event handlers threw an exception. | Improve this Doc View Source OnPropertyChanged<T>(String, ref T, T) Called when a property is to be changed. Declaration protected bool OnPropertyChanged<T>(string propertyName, ref T field, T value) Parameters Type Name Description System.String propertyName The name of the property that has changed. T field The field to which the value is to be assigned. T value The value to assign. Returns Type Description System.Boolean true if the property has changed; otherwise, false Type Parameters Name Description T The type of the property. Remarks Raises the PropertyChanged event if the value has changed. Events | Improve this Doc View Source PropertyChanged Occurs when a property changes. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.IDisposable System.ComponentModel.INotifyPropertyChanged See Also System.ComponentModel.INotifyPropertyChanged System.IDisposable"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationObjectBase.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationObjectBase.html",
    "title": "Class ConfigurationObjectBase | API Documentation",
    "keywords": "Class ConfigurationObjectBase A base class that allows configuration from classes in the Microsoft.Extensions.Configuration namespace to be to be accessed through a user-defined model with strongly typed interfaces. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationObjectBase ConfigurationObjectBase<TInterface> Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild Inherited Members NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public abstract class ConfigurationObjectBase : NotifyPropertyChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild Remarks For each requested model only a single instance of the model is ever constructed for a given Microsoft.Extensions.Configuration.IConfigurationSection or Microsoft.Extensions.Configuration.IConfigurationRoot . The System.ComponentModel.INotifyPropertyChanged interface is supported allowing changes to be detected and reported from both the underlying configuration source (through the source changed event) and from detected changes made to properties with a setter. Only material changes are reported, and change with no practical impact (for example assigning a new instance of a string with the same value) will not be reported. Constructors | Improve this Doc View Source ConfigurationObjectBase(PropertyDef, IConfigurationRoot, IConfigurationParent) Initializes a new instance of the ConfigurationObjectBase class. Declaration protected ConfigurationObjectBase(PropertyDef propertyDef, IConfigurationRoot configurationRoot, IConfigurationParent parent) Parameters Type Name Description PropertyDef propertyDef The definition of the property defined by this object. This can be if this object is the root of the hierarchy. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read and write values. IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. Exceptions Type Condition System.ArgumentNullException configurationRoot is null . | Improve this Doc View Source ConfigurationObjectBase(IEnumerable<PropertyDef>, IConfigurationRoot, IConfigurationParent) Initializes a new instance of the ConfigurationObjectBase class. Declaration protected ConfigurationObjectBase(IEnumerable<PropertyDef> childPropertyDefs, IConfigurationRoot configurationRoot, IConfigurationParent parent) Parameters Type Name Description System.Collections.Generic.IEnumerable < PropertyDef > childPropertyDefs A sequence containing the definitions of the properties to represent. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read and write values. IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. Fields | Improve this Doc View Source PropertiesByName A dictionary of property values keyed on the name of the property it represents (case sensitive). Declaration protected readonly Dictionary<string, IValue> PropertiesByName Field Value Type Description System.Collections.Generic.Dictionary < System.String , IValue > Properties | Improve this Doc View Source InterfaceType Gets the type of the interface implemented by this object. Declaration protected abstract Type InterfaceType { get; } Property Value Type Description System.Type The type of the interface implemented by this object. | Improve this Doc View Source IsDirty Gets a value indicating whether this object has any properties with unsaved changes. Declaration public bool IsDirty { get; } Property Value Type Description System.Boolean true if this object has any properties with unsaved changes; otherwise, false . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source IsReadOnly Gets a value indicating whether this container is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this container is read-only; otherwise, false . | Improve this Doc View Source Item[String] Gets or sets the value of the property with the specified name. Declaration protected object this[string name] { get; set; } Parameters Type Name Description System.String name The name of the property to get or set. Property Value Type Description System.Object The value requested. Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source PropertyDef Gets the definition of this property object. Declaration public PropertyDef PropertyDef { get; } Property Value Type Description PropertyDef The definition of this property object. | Improve this Doc View Source Values Gets the property values of the object. Declaration protected IEnumerable<IValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IValue > The property values of the object. Methods | Improve this Doc View Source Delete() Recursively deletes all of the properties from the configuration sources. Declaration public void Delete() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) | Improve this Doc View Source GetPath() Gets the path to this configuration object. Declaration public string GetPath() Returns Type Description System.String A string containing the path to this configuration object. | Improve this Doc View Source Load() Loads all of the properties from the configuration sources, overwriting any unsaved changes. Declaration public void Load() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Save() Saves this current values for each property back to the configuration sources. Declaration public void Save() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source SetParent(IConfigurationParent) Sets the parent of a configuration object. Declaration public void SetParent(IConfigurationParent parent) Parameters Type Name Description IConfigurationParent parent The new parent object. | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IValueChanged.OnValueChanged(IValue, IValue) Called when a value has changed. Declaration void IValueChanged.OnValueChanged(IValue oldValue, IValue newValue) Parameters Type Name Description IValue oldValue The old value. IValue newValue The new value. Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild See Also IConfigurationObject"
  },
  "api/OpenCollar.Extensions.Configuration.Collections.ReadOnlyConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.ReadOnlyConfigurationDictionary-1.html",
    "title": "Class ReadOnlyConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Class ReadOnlyConfigurationDictionary<TElement> A read-only dictionary of configuration objects, keyed on the name of the object. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationDictionaryBase < System.String , TElement> ConfigurationDictionary <TElement> ReadOnlyConfigurationDictionary<TElement> Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild IConfigurationDictionary <TElement> System.Collections.Generic.IDictionary < System.String , TElement> System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , TElement>> System.Collections.Specialized.INotifyCollectionChanged System.Collections.Generic.IReadOnlyDictionary < System.String , TElement> System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , TElement>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , TElement>> System.Collections.IEnumerable Inherited Members ConfigurationDictionary<TElement>.IDictionary<String, TElement>.Item[String] ConfigurationDictionary<TElement>.Add(KeyValuePair<String, TElement>) ConfigurationDictionary<TElement>.Add(String, TElement) ConfigurationDictionary<TElement>.AddCopy(KeyValuePair<String, TElement>) ConfigurationDictionary<TElement>.Contains(TElement) ConfigurationDictionary<TElement>.CopyTo(KeyValuePair<String, TElement>[], Int32) ConfigurationDictionary<TElement>.GetEnumerator() ConfigurationDictionary<TElement>.Remove(KeyValuePair<String, TElement>) ConfigurationDictionary<TElement>.IDictionary<String, TElement>.Add(String, TElement) ConfigurationDictionary<TElement>.IConfigurationDictionary<TElement>.AddNew(String) ConfigurationDictionary<TElement>.ICollection<KeyValuePair<String, TElement>>.Contains(KeyValuePair<String, TElement>) ConfigurationDictionaryBase<String, TElement>.CollectionChanged ConfigurationDictionaryBase<String, TElement>.Count ConfigurationDictionaryBase<String, TElement>.IsDirty ConfigurationDictionaryBase<String, TElement>.IsReadOnly ConfigurationDictionaryBase<String, TElement>.Keys ConfigurationDictionaryBase<String, TElement>.PropertyDef ConfigurationDictionaryBase<String, TElement>.Values ConfigurationDictionaryBase<String, TElement>.InnerCount ConfigurationDictionaryBase<String, TElement>.InnerIsReadOnly ConfigurationDictionaryBase<String, TElement>.Lock ConfigurationDictionaryBase<String, TElement>.OrderedItems ConfigurationDictionaryBase<String, TElement>.Item[String] ConfigurationDictionaryBase<String, TElement>.AddCopy(String, TElement) ConfigurationDictionaryBase<String, TElement>.Clear() ConfigurationDictionaryBase<String, TElement>.ContainsKey(String) ConfigurationDictionaryBase<String, TElement>.Delete() ConfigurationDictionaryBase<String, TElement>.GetPath() ConfigurationDictionaryBase<String, TElement>.Load() ConfigurationDictionaryBase<String, TElement>.OnValueChanged(IValue, IValue) ConfigurationDictionaryBase<String, TElement>.Remove(String) ConfigurationDictionaryBase<String, TElement>.Remove(TElement) ConfigurationDictionaryBase<String, TElement>.Save() ConfigurationDictionaryBase<String, TElement>.SetParent(IConfigurationParent) ConfigurationDictionaryBase<String, TElement>.TryGetValue(String, TElement) ConfigurationDictionaryBase<String, TElement>.IEnumerable.GetEnumerator() ConfigurationDictionaryBase<String, TElement>.GetIndexedElements(IEnumerable<TElement>) ConfigurationDictionaryBase<String, TElement>.Add(String, TElement) ConfigurationDictionaryBase<String, TElement>.AddNew(String) ConfigurationDictionaryBase<String, TElement>.ContainsValue(TElement) ConfigurationDictionaryBase<String, TElement>.DisableCollectionChangedEvents() ConfigurationDictionaryBase<String, TElement>.Dispose(Boolean) ConfigurationDictionaryBase<String, TElement>.EnableCollectionChangedEvents() ConfigurationDictionaryBase<String, TElement>.InnerCopyTo(KeyValuePair<String, Element<String, TElement>>[], Int32) ConfigurationDictionaryBase<String, TElement>.OnCollectionChanged(NotifyCollectionChangedEventArgs) ConfigurationDictionaryBase<String, TElement>.ReIndex(Int32, Func<Int32, Element<String, TElement>, String>) ConfigurationDictionaryBase<String, TElement>.Replace(IEnumerable<Element<String, TElement>>) NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.Dispose(Boolean) Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration.Collections Assembly : OpenCollar.Extensions.Configuration.dll Syntax public sealed class ReadOnlyConfigurationDictionary<TElement> : ConfigurationDictionary<TElement>, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild, IConfigurationDictionary<TElement>, IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, INotifyCollectionChanged, IReadOnlyDictionary<string, TElement>, IReadOnlyCollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable Type Parameters Name Description TElement The type of the element. Constructors | Improve this Doc View Source ReadOnlyConfigurationDictionary(IConfigurationObject, PropertyDef, IConfigurationRoot) Initializes a new instance of the ConfigurationDictionary<TElement> class. Declaration public ReadOnlyConfigurationDictionary(IConfigurationObject parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot) Parameters Type Name Description IConfigurationObject parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. | Improve this Doc View Source ReadOnlyConfigurationDictionary(IConfigurationParent, PropertyDef, IConfigurationRoot, IEnumerable<KeyValuePair<String, TElement>>) Initializes a new instance of the ConfigurationDictionary<TElement> class. Declaration public ReadOnlyConfigurationDictionary(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, IEnumerable<KeyValuePair<string, TElement>> elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , TElement>> elements The elements with which to initialize to the collection. | Improve this Doc View Source ReadOnlyConfigurationDictionary(IConfigurationParent, PropertyDef, IConfigurationRoot, KeyValuePair<String, TElement>[]) Initializes a new instance of the ConfigurationDictionary<TElement> class. Declaration public ReadOnlyConfigurationDictionary(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, params KeyValuePair<string, TElement>[] elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.KeyValuePair < System.String , TElement>[] elements A parameter array containing the elements with which to initialize to the collection. Properties | Improve this Doc View Source InnerIsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration protected override bool InnerIsReadOnly { get; } Property Value Type Description System.Boolean Overrides OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionary<TElement>.InnerIsReadOnly Explicit Interface Implementations | Improve this Doc View Source IReadOnlyDictionary<String, TElement>.Item[String] Gets the element with the specified key. Declaration TElement IReadOnlyDictionary<string, TElement>.this[string key] { get; } Parameters Type Name Description System.String key The key identify the element. Returns Type Description TElement The element requested. | Improve this Doc View Source IReadOnlyDictionary<String, TElement>.Keys Gets an System.Collections.Generic.ICollection<T> containing the keys of the System.Collections.Generic.IDictionary<TKey, TValue> . Declaration IEnumerable<string> IReadOnlyDictionary<string, TElement>.Keys { get; } Returns Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source IReadOnlyDictionary<String, TElement>.Values Gets an System.Collections.Generic.ICollection<T> containing the values in the System.Collections.Generic.IDictionary<TKey, TValue> . Declaration IEnumerable<TElement> IReadOnlyDictionary<string, TElement>.Values { get; } Returns Type Description System.Collections.Generic.IEnumerable <TElement> | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild IConfigurationDictionary<TElement> System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Specialized.INotifyCollectionChanged System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable See Also ConfigurationDictionaryBase <TKey, TElement> IConfigurationDictionary <TElement>"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationException.html",
    "title": "Class ConfigurationException | API Documentation",
    "keywords": "Class ConfigurationException An exception thrown when an error occurs during the reading or writing of configuration. Inheritance System.Object System.Exception ConfigurationException TypeMismatchException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [Serializable] public class ConfigurationException : Exception, ISerializable Constructors | Improve this Doc View Source ConfigurationException() Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException() | Improve this Doc View Source ConfigurationException(SerializationInfo, StreamingContext) Initializes a new instance of the ConfigurationException class. Declaration protected ConfigurationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source ConfigurationException(String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source ConfigurationException(String, String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string configurationPath, string message) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The message that describes the error. | Improve this Doc View Source ConfigurationException(String, String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string configurationPath, string message, Exception innerException) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Properties | Improve this Doc View Source ConfigurationPath Gets or sets the path to the configuration affected. Declaration public string ConfigurationPath { get; set; } Property Value Type Description System.String The path to the configuration affected. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionary-1.html",
    "title": "Class ConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Class ConfigurationDictionary<TElement> A dictionary of configuration objects, keyed on the name of the object. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationDictionaryBase < System.String , TElement> ConfigurationDictionary<TElement> ReadOnlyConfigurationDictionary<TElement> Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild IConfigurationDictionary <TElement> System.Collections.Generic.IDictionary < System.String , TElement> System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , TElement>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , TElement>> System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged Inherited Members ConfigurationDictionaryBase<String, TElement>.CollectionChanged ConfigurationDictionaryBase<String, TElement>.Count ConfigurationDictionaryBase<String, TElement>.IsDirty ConfigurationDictionaryBase<String, TElement>.IsReadOnly ConfigurationDictionaryBase<String, TElement>.Keys ConfigurationDictionaryBase<String, TElement>.PropertyDef ConfigurationDictionaryBase<String, TElement>.Values ConfigurationDictionaryBase<String, TElement>.InnerCount ConfigurationDictionaryBase<String, TElement>.InnerIsReadOnly ConfigurationDictionaryBase<String, TElement>.Lock ConfigurationDictionaryBase<String, TElement>.OrderedItems ConfigurationDictionaryBase<String, TElement>.Item[String] ConfigurationDictionaryBase<String, TElement>.AddCopy(String, TElement) ConfigurationDictionaryBase<String, TElement>.Clear() ConfigurationDictionaryBase<String, TElement>.ContainsKey(String) ConfigurationDictionaryBase<String, TElement>.Delete() ConfigurationDictionaryBase<String, TElement>.GetPath() ConfigurationDictionaryBase<String, TElement>.Load() ConfigurationDictionaryBase<String, TElement>.OnValueChanged(IValue, IValue) ConfigurationDictionaryBase<String, TElement>.Remove(String) ConfigurationDictionaryBase<String, TElement>.Remove(TElement) ConfigurationDictionaryBase<String, TElement>.Save() ConfigurationDictionaryBase<String, TElement>.SetParent(IConfigurationParent) ConfigurationDictionaryBase<String, TElement>.TryGetValue(String, TElement) ConfigurationDictionaryBase<String, TElement>.IEnumerable.GetEnumerator() ConfigurationDictionaryBase<String, TElement>.GetIndexedElements(IEnumerable<TElement>) ConfigurationDictionaryBase<String, TElement>.Add(String, TElement) ConfigurationDictionaryBase<String, TElement>.AddNew(String) ConfigurationDictionaryBase<String, TElement>.ContainsValue(TElement) ConfigurationDictionaryBase<String, TElement>.DisableCollectionChangedEvents() ConfigurationDictionaryBase<String, TElement>.Dispose(Boolean) ConfigurationDictionaryBase<String, TElement>.EnableCollectionChangedEvents() ConfigurationDictionaryBase<String, TElement>.InnerCopyTo(KeyValuePair<String, Element<String, TElement>>[], Int32) ConfigurationDictionaryBase<String, TElement>.OnCollectionChanged(NotifyCollectionChangedEventArgs) ConfigurationDictionaryBase<String, TElement>.ReIndex(Int32, Func<Int32, Element<String, TElement>, String>) ConfigurationDictionaryBase<String, TElement>.Replace(IEnumerable<Element<String, TElement>>) NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.Dispose(Boolean) Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration.Collections Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class ConfigurationDictionary<TElement> : ConfigurationDictionaryBase<string, TElement>, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild, IConfigurationDictionary<TElement>, IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable, INotifyCollectionChanged Type Parameters Name Description TElement The type of the element. Constructors | Improve this Doc View Source ConfigurationDictionary(IConfigurationParent, PropertyDef, IConfigurationRoot, IEnumerable<KeyValuePair<String, TElement>>) Initializes a new instance of the ConfigurationDictionary<TElement> class. Declaration public ConfigurationDictionary(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, IEnumerable<KeyValuePair<string, TElement>> elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , TElement>> elements The elements with which to initialize to the collection. | Improve this Doc View Source ConfigurationDictionary(IConfigurationParent, PropertyDef, IConfigurationRoot, KeyValuePair<String, TElement>[]) Initializes a new instance of the ConfigurationDictionary<TElement> class. Declaration public ConfigurationDictionary(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, params KeyValuePair<string, TElement>[] elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.KeyValuePair < System.String , TElement>[] elements A parameter array containing the elements with which to initialize to the collection. Properties | Improve this Doc View Source InnerIsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration protected override bool InnerIsReadOnly { get; } Property Value Type Description System.Boolean Overrides OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<System.String, TElement>.InnerIsReadOnly Methods | Improve this Doc View Source Add(KeyValuePair<String, TElement>) Adds an item to the System.Collections.Generic.ICollection{T} . Declaration public void Add(KeyValuePair<string, TElement> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , TElement> item The object to add to the System.Collections.Generic.ICollection{T} . | Improve this Doc View Source Add(String, TElement) Adds the specified element to the dictionary, using the name of the object as a the key. Declaration public void Add(string key, TElement element) Parameters Type Name Description System.String key The key identifying the value to add.. TElement element The element to add to the dictionary. | Improve this Doc View Source AddCopy(KeyValuePair<String, TElement>) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration public void AddCopy(KeyValuePair<string, TElement> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , TElement> item The object to add to the System.Collections.Generic.ICollection{T} . Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source Contains(TElement) Determines whether this instance contains the object. Declaration public bool Contains(TElement element) Parameters Type Name Description TElement element The element for which to check. Returns Type Description System.Boolean true if the dictionary contains the specified element; otherwise, false . | Improve this Doc View Source CopyTo(KeyValuePair<String, TElement>[], Int32) Copies the elements of the System.Collections.Generic.ICollection<T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(KeyValuePair<string, TElement>[] array, int arrayIndex) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , TElement>[] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<string, TElement>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.String , TElement>> An enumerator that can be used to iterate through the collection. | Improve this Doc View Source Remove(KeyValuePair<String, TElement>) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(KeyValuePair<string, TElement> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , TElement> item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false . This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Explicit Interface Implementations | Improve this Doc View Source IConfigurationDictionary<TElement>.AddNew(String) Adds a new value with the key specified, returning the new value. Declaration TElement IConfigurationDictionary<TElement>.AddNew(string key) Parameters Type Name Description System.String key The key identifying the value to add. Returns Type Description TElement The newly added value. | Improve this Doc View Source ICollection<KeyValuePair<String, TElement>>.Contains(KeyValuePair<String, TElement>) Determines whether this instance contains the object given. Declaration bool ICollection<KeyValuePair<string, TElement>>.Contains(KeyValuePair<string, TElement> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , TElement> item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false . | Improve this Doc View Source IDictionary<String, TElement>.Add(String, TElement) Adds the specified item to the collection, using the key specified. Declaration void IDictionary<string, TElement>.Add(string key, TElement value) Parameters Type Name Description System.String key The key used to identify the item to add. Must be unique. TElement value The value to assign to the value. | Improve this Doc View Source IDictionary<String, TElement>.Item[String] Gets or sets the element with the specified key. Declaration TElement IDictionary<string, TElement>.this[string key] { get; set; } Parameters Type Name Description System.String key The key identifying the element required. Returns Type Description TElement The specified element. | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild IConfigurationDictionary<TElement> System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged See Also ConfigurationDictionaryBase <TKey, TElement> IConfigurationDictionary <TElement>"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationCollection-1.html",
    "title": "Interface IConfigurationCollection<TElement> | API Documentation",
    "keywords": "Interface IConfigurationCollection<TElement> Represents a collection of values stored in a property. Inherited Members System.Collections.Generic.IList<TElement>.IndexOf(TElement) System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement) System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32) System.Collections.Generic.IList<TElement>.Item[System.Int32] System.Collections.Generic.ICollection<TElement>.Add(TElement) System.Collections.Generic.ICollection<TElement>.Clear() System.Collections.Generic.ICollection<TElement>.Contains(TElement) System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[], System.Int32) System.Collections.Generic.ICollection<TElement>.Remove(TElement) System.Collections.Generic.ICollection<TElement>.Count System.Collections.Generic.ICollection<TElement>.IsReadOnly System.Collections.Generic.IEnumerable<TElement>.GetEnumerator() System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationCollection<TElement> : IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable, INotifyCollectionChanged Type Parameters Name Description TElement The type of the array element. This must be nullable if the type is a reference type and can be null . Methods | Improve this Doc View Source AddCopy(TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration TElement AddCopy(TElement value) Parameters Type Name Description TElement value The value to copy. Returns Type Description TElement The newly added element. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew() Adds a new value with the key specified, returning the new value. Declaration TElement AddNew() Returns Type Description TElement The newly added element."
  },
  "api/OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase-2.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase-2.html",
    "title": "Class ConfigurationDictionaryBase<TKey, TElement> | API Documentation",
    "keywords": "Class ConfigurationDictionaryBase<TKey, TElement> A base class provide the functionality used by both dictionaries and collections. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationDictionaryBase<TKey, TElement> ConfigurationCollection<TElement> ConfigurationDictionary<TElement> ReadOnlyConfigurationCollection<TElement> Implements System.Collections.IEnumerable IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild Inherited Members NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration.Collections Assembly : OpenCollar.Extensions.Configuration.dll Syntax public abstract class ConfigurationDictionaryBase<TKey, TElement> : NotifyPropertyChanged, IEnumerable, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild Type Parameters Name Description TKey The type of the key. TElement The type of the element. Constructors | Improve this Doc View Source ConfigurationDictionaryBase(IConfigurationParent, PropertyDef, IConfigurationRoot) Initializes a new instance of the ConfigurationDictionaryBase<TKey, TElement> class. Declaration protected ConfigurationDictionaryBase(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. | Improve this Doc View Source ConfigurationDictionaryBase(IConfigurationParent, PropertyDef, IConfigurationRoot, IEnumerable<KeyValuePair<TKey, TElement>>) Initializes a new instance of the ConfigurationDictionaryBase<TKey, TElement> class. Declaration protected ConfigurationDictionaryBase(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, IEnumerable<KeyValuePair<TKey, TElement>> items) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TElement>> items The elements with which to initialize to the collection. Properties | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements contained in the System.Collections.Generic.ICollection<T> . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source InnerCount Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration protected int InnerCount { get; } Property Value Type Description System.Int32 The number of elements contained in the System.Collections.Generic.ICollection<T> . Remarks Assumes that the caller already holds a read or write lock. | Improve this Doc View Source InnerIsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration protected abstract bool InnerIsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDirty Gets a value indicating whether this object has any properties with unsaved changes. Declaration public bool IsDirty { get; } Property Value Type Description System.Boolean true if this object has any properties with unsaved changes; otherwise, false . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[TKey] Gets or sets the item with the specified key. Declaration public Element<TKey, TElement> this[TKey key] { get; } Parameters Type Name Description TKey key The key identifying the element to get or set. Property Value Type Description Element <TKey, TElement> The item to get or set. Exceptions Type Condition System.ArgumentOutOfRangeException key did not identify a valid element. System.NotImplementedException This collection is read-only. System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Keys Gets an System.Collections.Generic.ICollection<T> containing the keys of the System.Collections.Generic.IDictionary<TKey, TValue> . Declaration public ICollection<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.ICollection <TKey> Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Lock Gets the lock object used to control concurrent access to the collection. Declaration protected ReaderWriterLockSlim Lock { get; } Property Value Type Description System.Threading.ReaderWriterLockSlim The lock object used to control concurrent access to the collection. | Improve this Doc View Source OrderedItems Gets the items in the dictionary as an ordered, read-only list. Declaration protected IReadOnlyList<Element<TKey, TElement>> OrderedItems { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Element <TKey, TElement>> The items in the dictionary as an ordered, read-only list. | Improve this Doc View Source PropertyDef Gets the definition of this property object. Declaration public PropertyDef PropertyDef { get; } Property Value Type Description PropertyDef The definition of this property object. | Improve this Doc View Source Values Gets an System.Collections.Generic.ICollection<T> containing the values in the System.Collections.Generic.IDictionary<TKey, TValue> . Declaration public ICollection<TElement> Values { get; } Property Value Type Description System.Collections.Generic.ICollection <TElement> Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. Methods | Improve this Doc View Source Add(TKey, TElement) Adds the specified item to the collection, using the key specified. Declaration protected void Add(TKey key, TElement value) Parameters Type Name Description TKey key The key used to identify the item to add. Must be unique. TElement value The value to assign to the value. Exceptions Type Condition System.ArgumentException An item with the same key has already been added. System.NotImplementedException This collection is read-only. System.ObjectDisposedException This method cannot be used after the object has been disposed of. TypeMismatchException Expected object of different type. | Improve this Doc View Source AddCopy(TKey, TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration public TElement AddCopy(TKey key, TElement value) Parameters Type Name Description TKey key The key identifying the value to add. TElement value The value to copy. Returns Type Description TElement The newly added element. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew(TKey) Adds a new value with the key specified, returning the new value. Declaration protected TElement AddNew(TKey key) Parameters Type Name Description TKey key The key identifying the value to add. Returns Type Description TElement The newly added value. | Improve this Doc View Source Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Exceptions Type Condition System.NotImplementedException This collection is read-only. System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source ContainsKey(TKey) Determines whether the System.Collections.Generic.IDictionary<TKey, TValue> contains an element with the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate in the System.Collections.Generic.IDictionary<TKey, TValue> . Returns Type Description System.Boolean true if the System.Collections.Generic.IDictionary<TKey, TValue> contains an element with the key; otherwise, false . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source ContainsValue(TElement) Determines whether this instance contains the object. Declaration protected bool ContainsValue(TElement item) Parameters Type Name Description TElement item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false . | Improve this Doc View Source Delete() Recursively deletes all of the properties from the configuration sources. Declaration public void Delete() Exceptions Type Condition System.NotImplementedException | Improve this Doc View Source DisableCollectionChangedEvents() Disables the firing of the System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged event on the current thread. Declaration protected void DisableCollectionChangedEvents() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Disposable.Dispose(Boolean) | Improve this Doc View Source EnableCollectionChangedEvents() Enables the firing of the System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged event on the current thread. Declaration protected void EnableCollectionChangedEvents() | Improve this Doc View Source GetIndexedElements(IEnumerable<TElement>) Gets the elements given as a sequence of System.Collections.Generic.KeyValuePair<TKey, TValue> keyed in the index. Declaration protected static IEnumerable<KeyValuePair<int, TElement>> GetIndexedElements(IEnumerable<TElement> elements) Parameters Type Name Description System.Collections.Generic.IEnumerable <TElement> elements The elements to convert. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Int32 , TElement>> The sequence of elements given, as System.Collections.Generic.KeyValuePair<TKey, TValue> objects. | Improve this Doc View Source GetPath() Gets the path to this configuration object. Declaration public string GetPath() Returns Type Description System.String A string containing the path to this configuration object. | Improve this Doc View Source InnerCopyTo(KeyValuePair<TKey, Element<TKey, TElement>>[], Int32) Copies the elements of the System.Collections.Generic.ICollection<T> to an System.Array , starting at a particular System.Array index. Declaration protected void InnerCopyTo(KeyValuePair<TKey, Element<TKey, TElement>>[] array, int arrayIndex) Parameters Type Name Description System.Collections.Generic.KeyValuePair <TKey, Element <TKey, TElement>>[] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Remarks Assumes the caller already holds a read or write lock. | Improve this Doc View Source Load() Loads all of the properties from the configuration sources, overwriting any unsaved changes. Declaration public void Load() | Improve this Doc View Source OnCollectionChanged(NotifyCollectionChangedEventArgs) Called when the collection has changed. Declaration protected void OnCollectionChanged(NotifyCollectionChangedEventArgs args) Parameters Type Name Description System.Collections.Specialized.NotifyCollectionChangedEventArgs args The System.Collections.Specialized.NotifyCollectionChangedEventArgs instance defining the change. | Improve this Doc View Source OnValueChanged(IValue, IValue) Called when a value has changed. Declaration public void OnValueChanged(IValue oldValue, IValue newValue) Parameters Type Name Description IValue oldValue The old value. IValue newValue The new value. | Improve this Doc View Source ReIndex(Int32, Func<Int32, Element<TKey, TElement>, TKey>) Re-indexes the items after the specified index after removing an item. Declaration protected void ReIndex(int removedIndex, Func<int, Element<TKey, TElement>, TKey> getNewKey) Parameters Type Name Description System.Int32 removedIndex Index of the removed item. System.Func < System.Int32 , Element <TKey, TElement>, TKey> getNewKey A function that returns the new key for re-indexed items. | Improve this Doc View Source Remove(TKey) Removes the element with the specified key from the System.Collections.Generic.IDictionary<TKey, TValue> . Declaration public virtual bool Remove(TKey key) Parameters Type Name Description TKey key The key of the element to remove. Returns Type Description System.Boolean true if the element is successfully removed; otherwise, false . This method also returns false if key was not found in the original System.Collections.Generic.IDictionary<TKey, TValue> . Exceptions Type Condition System.NotImplementedException This collection is read-only. | Improve this Doc View Source Remove(TElement) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public virtual bool Remove(TElement item) Parameters Type Name Description TElement item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false . This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Exceptions Type Condition System.NotImplementedException This collection is read-only. | Improve this Doc View Source Replace(IEnumerable<Element<TKey, TElement>>) Replaces the contents of the dictionary. Declaration protected void Replace(IEnumerable<Element<TKey, TElement>> list) Parameters Type Name Description System.Collections.Generic.IEnumerable < Element <TKey, TElement>> list The new contents. Remarks Assumes that a write lock is held by the caller. Exceptions Type Condition System.NotImplementedException This collection is read-only. | Improve this Doc View Source Save() Saves this current values for each property back to the configuration sources. Declaration public void Save() | Improve this Doc View Source SetParent(IConfigurationParent) Sets the parent of a configuration object. Declaration public void SetParent(IConfigurationParent parent) Parameters Type Name Description IConfigurationParent parent The new parent object. | Improve this Doc View Source TryGetValue(TKey, out TElement) Gets the value associated with the specified key. Declaration public bool TryGetValue(TKey key, out TElement value) Parameters Type Name Description TKey key The key whose value to get. TElement value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements System.Collections.Generic.IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false . Events | Improve this Doc View Source CollectionChanged Occurs when the collection changes. Declaration public event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description System.Collections.Specialized.NotifyCollectionChangedEventHandler Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild See Also IConfigurationObject System.Collections.Generic.IDictionary <TKey, TValue> System.Collections.Specialized.INotifyCollectionChanged"
  },
  "api/OpenCollar.Extensions.Configuration.PathIs.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PathIs.html",
    "title": "Enum PathIs | API Documentation",
    "keywords": "Enum PathIs An enumeration of the ways in which the string supplied to the PathAttribute attribute can be used to create a full path. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public enum PathIs Fields Name Description Root The path is treated as a root and any previous context is ignored. Suffix The path is treated as a suffix to be applied (as part of colon delimited list) to the existing path context. Unknown The usage of the path is unknown or undefined. Use of this value will usually result in an error; it is provided to as sentinel to detect accidental usages."
  },
  "api/OpenCollar.Extensions.Configuration.ServiceCollectionExtensions.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | API Documentation",
    "keywords": "Class ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection type allowing configuration objects to be registered. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddConfigurationReader<TConfigurationObject>(IServiceCollection) Add a new kind of configuration reader that represents values taken directly from the Microsoft.Extensions.Configuration.IConfigurationRoot object in the service collection. Declaration public static void AddConfigurationReader<TConfigurationObject>(this IServiceCollection serviceCollection) where TConfigurationObject : IConfigurationObject Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to which to add the configuration reader. This must not be null . Type Parameters Name Description TConfigurationObject The interface through which consumers will access the configuration. This must be derived from the IConfigurationObject interface."
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationChild.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationChild.html",
    "title": "Interface IConfigurationChild | API Documentation",
    "keywords": "Interface IConfigurationChild Defines the interface common to a objects that may belong to a configuration object. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationChild Methods | Improve this Doc View Source SetParent(IConfigurationParent) Sets the parent of a configuration object. Declaration void SetParent(IConfigurationParent parent) Parameters Type Name Description IConfigurationParent parent The new parent object."
  },
  "api/OpenCollar.Extensions.Configuration.Collections.Element-2.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.Element-2.html",
    "title": "Class Element<TKey, TValue> | API Documentation",
    "keywords": "Class Element<TKey, TValue> A class used to represent a property on an interface and its location in the configuration model. Inheritance System.Object ValueBase < ConfigurationDictionaryBase <TKey, TValue>, TValue> Element<TKey, TValue> Implements IValue IConfigurationParent System.IEquatable < Element <TKey, TValue>> Inherited Members ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>._parent ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>._propertyDef ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IsDirty ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IsReadOnly ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.Parent ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.Path ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.PropertyDef ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.Value ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.IsDirty ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.Parent ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.Path ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.Value ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.ValueImplementation ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.DeleteValue(IConfigurationRoot) ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.GetPath() ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.ReadValue(IConfigurationRoot) ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.SetValue(Object) ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.WriteValue(IConfigurationRoot) ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.DeleteValue(IConfigurationRoot) ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.ReadValue(IConfigurationRoot) ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>.IValue.WriteValue(IConfigurationRoot) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration.Collections Assembly : OpenCollar.Extensions.Configuration.dll Syntax public sealed class Element<TKey, TValue> : ValueBase<ConfigurationDictionaryBase<TKey, TValue>, TValue>, IValue, IConfigurationParent, IEquatable<Element<TKey, TValue>> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Properties | Improve this Doc View Source IsReadOnly Gets a value indicating whether this container is read-only. Declaration public override bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this container is read-only; otherwise, false . Overrides OpenCollar.Extensions.Configuration.ValueBase<OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<TKey, TValue>, TValue>.IsReadOnly | Improve this Doc View Source Key Gets the key that uniquely identified this element in the dictionary or collection. Declaration public TKey Key { get; } Property Value Type Description TKey The key that uniquely identified this element in the dictionary or collection. | Improve this Doc View Source ValueImplementation Gets the implementation details of the value object. Declaration protected override Implementation ValueImplementation { get; } Property Value Type Description Implementation The implementation details of the value object. Overrides OpenCollar.Extensions.Configuration.ValueBase<OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<TKey, TValue>, TValue>.ValueImplementation Methods | Improve this Doc View Source Equals(Element<TKey, TValue>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Element<TKey, TValue> other) Parameters Type Name Description Element <TKey, TValue> other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc View Source GetPath() Gets the path to this configuration object. Declaration public override string GetPath() Returns Type Description System.String A string containing the path to this configuration object. Overrides OpenCollar.Extensions.Configuration.ValueBase<OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<TKey, TValue>, TValue>.GetPath() Implements IValue IConfigurationParent System.IEquatable<T> See Also ValueBase <TParent, TValue> System.IEquatable <T>"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationObjectComparer.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationObjectComparer.html",
    "title": "Class ConfigurationObjectComparer | API Documentation",
    "keywords": "Class ConfigurationObjectComparer A comparer for objects that implement interfaces derived from IConfigurationObject . Inheritance System.Object ConfigurationObjectComparer Implements System.Collections.Generic.IEqualityComparer < IConfigurationObject > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class ConfigurationObjectComparer : IEqualityComparer<IConfigurationObject> Properties | Improve this Doc View Source Instance Gets an instance of the comparer Declaration public static ConfigurationObjectComparer Instance { get; } Property Value Type Description ConfigurationObjectComparer The instance of the comparer Methods | Improve this Doc View Source Equals(IConfigurationObject, IConfigurationObject) Determines whether the specified objects are equal. Declaration public bool Equals(IConfigurationObject x, IConfigurationObject y) Parameters Type Name Description IConfigurationObject x The first object of type to compare. IConfigurationObject y The second object of type to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false . | Improve this Doc View Source GetHashCode(IConfigurationObject) Returns a hash code for this instance. Declaration public int GetHashCode(IConfigurationObject obj) Parameters Type Name Description IConfigurationObject obj The object. Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Implements System.Collections.Generic.IEqualityComparer<T> See Also System.Collections.Generic.IEqualityComparer <T>"
  },
  "api/OpenCollar.Extensions.Configuration.IValue.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IValue.html",
    "title": "Interface IValue | API Documentation",
    "keywords": "Interface IValue The interface internally exposed by value objects. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IValue Properties | Improve this Doc View Source IsDirty Gets a value indicating whether this property has unsaved changes. Declaration bool IsDirty { get; } Property Value Type Description System.Boolean true if this property has unsaved changes; otherwise, false . | Improve this Doc View Source Parent Gets the parent object to which this value belongs. Declaration IValueChanged Parent { get; } Property Value Type Description IValueChanged The parent object to which this value belongs. | Improve this Doc View Source Path Gets the colon-delimited path to the underlying configuration value. Declaration string Path { get; } Property Value Type Description System.String The colon-delimited path to the underlying configuration value. | Improve this Doc View Source PropertyDef Gets the definition of the property represented by this value. Declaration PropertyDef PropertyDef { get; } Property Value Type Description PropertyDef The definition of the property represented by this value. | Improve this Doc View Source Value Gets or sets the value of the property represented by this instance. Declaration object Value { get; set; } Property Value Type Description System.Object The value of the property. Methods | Improve this Doc View Source DeleteValue(IConfigurationRoot) Reads the value of the value identified by PropertyDef from the configuration root given. Declaration void DeleteValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read the value. | Improve this Doc View Source ReadValue(IConfigurationRoot) Reads the value of the value identified by PropertyDef from the configuration root given. Declaration void ReadValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read the value. | Improve this Doc View Source SetValue(Object) Sets the value without firing any events. Declaration bool SetValue(object value) Parameters Type Name Description System.Object value The new value. Returns Type Description System.Boolean true if the value has changed; otherwise, false . | Improve this Doc View Source WriteValue(IConfigurationRoot) Writes the value to the configuration store. Declaration void WriteValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root to which to write the value."
  },
  "api/OpenCollar.Extensions.Configuration.ValueBase-2.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ValueBase-2.html",
    "title": "Class ValueBase<TParent, TValue> | API Documentation",
    "keywords": "Class ValueBase<TParent, TValue> A class used to represent a property on an interface and its location in the configuration model. Inheritance System.Object ValueBase<TParent, TValue> Element<TKey, TValue> Implements IValue IConfigurationParent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public abstract class ValueBase<TParent, TValue> : IValue, IConfigurationParent where TParent : class, IValueChanged, IConfigurationParent Type Parameters Name Description TParent The type of the parent object. Must implement interface. TValue The type of the contained value. Fields | Improve this Doc View Source _parent The parent for which this object represents a value. Declaration protected readonly TParent _parent Field Value Type Description TParent | Improve this Doc View Source _propertyDef The definition of the property represented by this value. Declaration protected readonly PropertyDef _propertyDef Field Value Type Description PropertyDef Properties | Improve this Doc View Source IsDirty Gets a value indicating whether this property has unsaved changes. Declaration public bool IsDirty { get; } Property Value Type Description System.Boolean true if this property has unsaved changes; otherwise, false . | Improve this Doc View Source IsReadOnly Gets a value indicating whether this container is read-only. Declaration public abstract bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this container is read-only; otherwise, false . | Improve this Doc View Source Parent Gets the parent object to which this value belongs. Declaration public TParent Parent { get; } Property Value Type Description TParent The parent object to which this value belongs. | Improve this Doc View Source Path Gets the colon-delimited path to the underlying configuration value. Declaration public string Path { get; } Property Value Type Description System.String The colon-delimited path to the underlying configuration value. | Improve this Doc View Source PropertyDef Gets the definition of the property represented by this value. Declaration public PropertyDef PropertyDef { get; } Property Value Type Description PropertyDef The definition of the property represented by this value. | Improve this Doc View Source Value Gets or sets the value represented by this instance. Declaration public TValue Value { get; set; } Property Value Type Description TValue The value of the property. Exceptions Type Condition System.NotImplementedException This value is read-only. | Improve this Doc View Source ValueImplementation Gets the implementation details of the value object. Declaration protected abstract Implementation ValueImplementation { get; } Property Value Type Description Implementation The implementation details of the value object. Methods | Improve this Doc View Source DeleteValue(IConfigurationRoot) Reads the value of the value identified by PropertyDef from the configuration root given. Declaration public void DeleteValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read the value. | Improve this Doc View Source GetPath() Gets the full path for this value. Declaration public abstract string GetPath() Returns Type Description System.String The full path for this value | Improve this Doc View Source ReadValue(IConfigurationRoot) Reads the value of the value identified by PropertyDef from the configuration root given. Declaration public void ReadValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read the value. | Improve this Doc View Source SetValue(Object) Sets the value without firing any events. Declaration public bool SetValue(object value) Parameters Type Name Description System.Object value The new value. Returns Type Description System.Boolean true if the value has changed; otherwise, false . | Improve this Doc View Source WriteValue(IConfigurationRoot) Writes the value to the configuration store. Declaration public void WriteValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root to which to write the value. Explicit Interface Implementations | Improve this Doc View Source IValue.DeleteValue(IConfigurationRoot) Reads the value of the value identified by PropertyDef from the configuration root given. Declaration void IValue.DeleteValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read the value. | Improve this Doc View Source IValue.IsDirty Gets a value indicating whether this property has unsaved changes. Declaration bool IValue.IsDirty { get; } Returns Type Description System.Boolean true if this property has unsaved changes; otherwise, false . | Improve this Doc View Source IValue.Parent Gets the parent object to which this value belongs. Declaration IValueChanged IValue.Parent { get; } Returns Type Description IValueChanged The parent object to which this value belongs. | Improve this Doc View Source IValue.Path Gets the colon-delimited path to the underlying configuration value. Declaration string IValue.Path { get; } Returns Type Description System.String The colon-delimited path to the underlying configuration value. | Improve this Doc View Source IValue.ReadValue(IConfigurationRoot) Reads the value of the value identified by PropertyDef from the configuration root given. Declaration void IValue.ReadValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read the value. | Improve this Doc View Source IValue.Value Gets or sets the value represented by this instance. Declaration object IValue.Value { get; set; } Returns Type Description System.Object The value of the property. | Improve this Doc View Source IValue.WriteValue(IConfigurationRoot) Writes the value to the configuration store. Declaration void IValue.WriteValue(IConfigurationRoot configurationRoot) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root to which to write the value. Implements IValue IConfigurationParent"
  },
  "api/OpenCollar.Extensions.Configuration.TypeMismatchException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.TypeMismatchException.html",
    "title": "Class TypeMismatchException | API Documentation",
    "keywords": "Class TypeMismatchException An exception thrown when an object of the wrong type is added to a collection or assigned to a property. Inheritance System.Object System.Exception ConfigurationException TypeMismatchException Implements System.Runtime.Serialization.ISerializable Inherited Members ConfigurationException.ConfigurationPath ConfigurationException.GetObjectData(SerializationInfo, StreamingContext) System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [Serializable] public class TypeMismatchException : ConfigurationException, ISerializable Constructors | Improve this Doc View Source TypeMismatchException() Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException() | Improve this Doc View Source TypeMismatchException(SerializationInfo, StreamingContext) Initializes a new instance of the TypeMismatchException class. Declaration protected TypeMismatchException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source TypeMismatchException(String) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source TypeMismatchException(String, Exception) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source TypeMismatchException(String, String) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string configurationPath, string message) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The message that describes the error. | Improve this Doc View Source TypeMismatchException(String, String, Exception) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string configurationPath, string message, Exception innerException) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.Collections.ReadOnlyConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.ReadOnlyConfigurationCollection-1.html",
    "title": "Class ReadOnlyConfigurationCollection<TElement> | API Documentation",
    "keywords": "Class ReadOnlyConfigurationCollection<TElement> A read-only collection of IConfigurationObject that notifies when an element is added or removed. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationDictionaryBase < System.Int32 , TElement> ReadOnlyConfigurationCollection<TElement> Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild System.Collections.Generic.IReadOnlyCollection <TElement> IConfigurationCollection <TElement> System.Collections.Generic.IList <TElement> System.Collections.Generic.ICollection <TElement> System.Collections.Generic.IEnumerable <TElement> System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged Inherited Members ConfigurationDictionaryBase<Int32, TElement>.CollectionChanged ConfigurationDictionaryBase<Int32, TElement>.Count ConfigurationDictionaryBase<Int32, TElement>.IsDirty ConfigurationDictionaryBase<Int32, TElement>.IsReadOnly ConfigurationDictionaryBase<Int32, TElement>.Keys ConfigurationDictionaryBase<Int32, TElement>.PropertyDef ConfigurationDictionaryBase<Int32, TElement>.Values ConfigurationDictionaryBase<Int32, TElement>.InnerCount ConfigurationDictionaryBase<Int32, TElement>.InnerIsReadOnly ConfigurationDictionaryBase<Int32, TElement>.Lock ConfigurationDictionaryBase<Int32, TElement>.OrderedItems ConfigurationDictionaryBase<Int32, TElement>.Item[Int32] ConfigurationDictionaryBase<Int32, TElement>.AddCopy(Int32, TElement) ConfigurationDictionaryBase<Int32, TElement>.Clear() ConfigurationDictionaryBase<Int32, TElement>.ContainsKey(Int32) ConfigurationDictionaryBase<Int32, TElement>.Delete() ConfigurationDictionaryBase<Int32, TElement>.GetPath() ConfigurationDictionaryBase<Int32, TElement>.Load() ConfigurationDictionaryBase<Int32, TElement>.OnValueChanged(IValue, IValue) ConfigurationDictionaryBase<Int32, TElement>.Remove(Int32) ConfigurationDictionaryBase<Int32, TElement>.Remove(TElement) ConfigurationDictionaryBase<Int32, TElement>.Save() ConfigurationDictionaryBase<Int32, TElement>.SetParent(IConfigurationParent) ConfigurationDictionaryBase<Int32, TElement>.TryGetValue(Int32, TElement) ConfigurationDictionaryBase<Int32, TElement>.IEnumerable.GetEnumerator() ConfigurationDictionaryBase<Int32, TElement>.GetIndexedElements(IEnumerable<TElement>) ConfigurationDictionaryBase<Int32, TElement>.Add(Int32, TElement) ConfigurationDictionaryBase<Int32, TElement>.AddNew(Int32) ConfigurationDictionaryBase<Int32, TElement>.ContainsValue(TElement) ConfigurationDictionaryBase<Int32, TElement>.DisableCollectionChangedEvents() ConfigurationDictionaryBase<Int32, TElement>.Dispose(Boolean) ConfigurationDictionaryBase<Int32, TElement>.EnableCollectionChangedEvents() ConfigurationDictionaryBase<Int32, TElement>.InnerCopyTo(KeyValuePair<Int32, Element<Int32, TElement>>[], Int32) ConfigurationDictionaryBase<Int32, TElement>.OnCollectionChanged(NotifyCollectionChangedEventArgs) ConfigurationDictionaryBase<Int32, TElement>.ReIndex(Int32, Func<Int32, Element<Int32, TElement>, Int32>) ConfigurationDictionaryBase<Int32, TElement>.Replace(IEnumerable<Element<Int32, TElement>>) NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.Dispose(Boolean) Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration.Collections Assembly : OpenCollar.Extensions.Configuration.dll Syntax public sealed class ReadOnlyConfigurationCollection<TElement> : ConfigurationDictionaryBase<int, TElement>, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild, IReadOnlyCollection<TElement>, IConfigurationCollection<TElement>, IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable, INotifyCollectionChanged Type Parameters Name Description TElement The type of the element. Constructors | Improve this Doc View Source ReadOnlyConfigurationCollection(IConfigurationParent, PropertyDef, IConfigurationRoot, TElement[]) Initializes a new instance of the ReadOnlyConfigurationCollection<TElement> class. Declaration public ReadOnlyConfigurationCollection(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, params TElement[] elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. TElement[] elements A parameter array containing the elements with which to initialize to the collection. | Improve this Doc View Source ReadOnlyConfigurationCollection(IConfigurationParent, PropertyDef, IConfigurationRoot, IEnumerable<TElement>) Initializes a new instance of the ReadOnlyConfigurationCollection<TElement> class. Declaration public ReadOnlyConfigurationCollection(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, IEnumerable<TElement> elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.IEnumerable <TElement> elements The elements with which to initialize to the collection. Properties | Improve this Doc View Source InnerIsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration protected override bool InnerIsReadOnly { get; } Property Value Type Description System.Boolean Overrides OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<System.Int32, TElement>.InnerIsReadOnly Methods | Improve this Doc View Source Add(TElement) Adds the specified item to the end of the collection.. Declaration public void Add(TElement item) Parameters Type Name Description TElement item The item to add. | Improve this Doc View Source AddCopy(TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration public TElement AddCopy(TElement value) Parameters Type Name Description TElement value The value to copy. Returns Type Description TElement The newly added element. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. Exceptions Type Condition System.NotImplementedException This collection is read-only. | Improve this Doc View Source AddNew() Adds a new value with the key specified, returning the new value. Declaration public TElement AddNew() Returns Type Description TElement The newly added element. Exceptions Type Condition System.NotImplementedException This collection is read-only. | Improve this Doc View Source Contains(TElement) Determines whether this instance contains the object. Declaration public bool Contains(TElement item) Parameters Type Name Description TElement item The item for which to check. Returns Type Description System.Boolean true if the collection contains the specified item; otherwise, false . | Improve this Doc View Source CopyTo(TElement[], Int32) Copies the contents of the collection to an array. Declaration public void CopyTo(TElement[] array, int arrayIndex) Parameters Type Name Description TElement[] array The array to which to copy the contents of the collection. System.Int32 arrayIndex The index of the first location in the array to which to copy the collection contents. Exceptions Type Condition System.ArgumentOutOfRangeException arrayIndex must be at least zero. or array is not large enough to hold the contents of this collection (if data is copied to the location specified by arrayIndex . | Improve this Doc View Source GetEnumerator() Gets the enumerator for the values in this collection. Declaration public IEnumerator<TElement> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TElement> The enumerator for the values in this collection. | Improve this Doc View Source IndexOf(TElement) Finds the index of the first element in the collection that equals the item provided. Declaration public int IndexOf(TElement item) Parameters Type Name Description TElement item The item to find. Returns Type Description System.Int32 The zero-based index of the first matching item or a value less than zero if no match is found. | Improve this Doc View Source Insert(Int32, TElement) Inserts an item at the specified index. Declaration public void Insert(int index, TElement item) Parameters Type Name Description System.Int32 index The zero-based index of the location at which the item should be inserted. TElement item The item to insert. Exceptions Type Condition System.NotImplementedException This collection is read-only. | Improve this Doc View Source RemoveAt(Int32) Removes the item at the zero-based index specified. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The index of the item to remove. Exceptions Type Condition System.NotImplementedException This collection is read-only. Explicit Interface Implementations | Improve this Doc View Source IList<TElement>.Item[Int32] Gets or sets the item at the specified index. Declaration TElement IList<TElement>.this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the item in the collection. Returns Type Description TElement The value of the item to get or set. | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild System.Collections.Generic.IReadOnlyCollection<T> IConfigurationCollection<TElement> System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged"
  },
  "api/OpenCollar.Extensions.Configuration.IValueChanged.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IValueChanged.html",
    "title": "Interface IValueChanged | API Documentation",
    "keywords": "Interface IValueChanged The interface used internally to allow values to call back to their parents to signal that a value has changed. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IValueChanged Methods | Improve this Doc View Source OnValueChanged(IValue, IValue) Called when a value has changed. Declaration void OnValueChanged(IValue oldValue, IValue newValue) Parameters Type Name Description IValue oldValue The old value. IValue newValue The new value."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "OpenCollar.Extensions.Configuration | API Documentation",
    "keywords": "OpenCollar.Extensions.Configuration Support for automatic validation, update and strongly-typed access to configuration. Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Where to Start | API Documentation",
    "keywords": "Support for automatic validation, update and strongly-typed access to configuration. Where to Start The starting point is to define an interface through which to read your configuration and add a reader in Startup.cs : // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddConfigurationReader<IMyConfig>(); } Later, when needed the configuration reader will be available as a service: public MyConstructor(IMyConfig config) { // Your config is available through the interface you defined in IMyConfig, strongly typed and validated. } Project Project Resources Source Code Issue Tracking GitHub Pages Build Status"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.Configuration | API Documentation",
    "keywords": "OpenCollar.Extensions.Configuration Support for automatic validation, update and strongly-typed access to configuration. API Documentation"
  },
  "api/OpenCollar.Extensions.Configuration.ImplementationKind.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ImplementationKind.html",
    "title": "Enum ImplementationKind | API Documentation",
    "keywords": "Enum ImplementationKind Defines the way in which the value returned by a property is implemented. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public enum ImplementationKind Fields Name Description ConfigurationCollection The implementation is derived from ConfigurationCollection<TElement> . ConfigurationDictionary The implementation is derived from ConfigurationDictionary<TElement> . ConfigurationObject The implementation is derived from ConfigurationObjectBase<TInterface> . Naive The implementation is the naive type (i.e. nothing special is required). Unknown The implementation is unknown or undefined."
  },
  "api/OpenCollar.Extensions.Configuration.UniversalComparer.html": {
    "href": "api/OpenCollar.Extensions.Configuration.UniversalComparer.html",
    "title": "Class UniversalComparer | API Documentation",
    "keywords": "Class UniversalComparer Support for comparison. Inheritance System.Object UniversalComparer Inherited Members System.Object.Equals(System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public static class UniversalComparer Methods | Improve this Doc View Source Equals(Object, Object) Compares two objects, using custom logic for configuration objects. Declaration public static bool Equals(object a, object b) Parameters Type Name Description System.Object a The first object to compare. System.Object b The second object to compare. Returns Type Description System.Boolean true if the objects are equivalent; otherwise, false ."
  },
  "api/OpenCollar.Extensions.Configuration.PropertyDef.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PropertyDef.html",
    "title": "Class PropertyDef | API Documentation",
    "keywords": "Class PropertyDef The definition of a property of a configuration object. Inheritance System.Object PropertyDef Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class PropertyDef Properties | Improve this Doc View Source DefaultValue Gets or sets the default value. Declaration public object DefaultValue { get; } Property Value Type Description System.Object The default value. Can be null . | Improve this Doc View Source ElementImplementation Gets the details of the specific implementation of this property. Declaration public Implementation ElementImplementation { get; } Property Value Type Description Implementation The details of the specific implementation of this property. | Improve this Doc View Source HasDefaultValue Gets a value indicating whether the property represented by this instance has default a value. Declaration public bool HasDefaultValue { get; } Property Value Type Description System.Boolean true if the property represented by this instance has default a value; otherwise, false . | Improve this Doc View Source Implementation Gets the details of the specific implementation of this property. Declaration public Implementation Implementation { get; } Property Value Type Description Implementation The details of the specific implementation of this property. | Improve this Doc View Source IsNullable Gets a value indicating whether the value of the property represented by this instance can be null . Declaration public bool IsNullable { get; } Property Value Type Description System.Boolean true if the value of the property represented by this instance is nullable; otherwise, false . | Improve this Doc View Source IsReadOnly Gets a value indicating whether this instance is read only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if the property is read only; otherwise, false for an editable property. | Improve this Doc View Source PathModifier Gets the path modifier. Declaration public PathIs PathModifier { get; } Property Value Type Description PathIs The path modifier. | Improve this Doc View Source PathSection Gets the path section. Declaration public string PathSection { get; } Property Value Type Description System.String The path section. | Improve this Doc View Source PropertyInfo Gets the property information that defines the interface property. Declaration public PropertyInfo PropertyInfo { get; } Property Value Type Description System.Reflection.PropertyInfo The property information that defines the interface property. | Improve this Doc View Source PropertyName Gets the name of the property represented by this object. Declaration public string PropertyName { get; } Property Value Type Description System.String The name of the property represented by this object. | Improve this Doc View Source Type Gets the type of the value held in the property. Declaration public Type Type { get; } Property Value Type Description System.Type The type of the value held in the property. | Improve this Doc View Source UnderlyingType Gets the basic type represented by the type of the property (for example by int? would have an underlying type of System.Int32 ). Declaration public Type UnderlyingType { get; } Property Value Type Description System.Type The basic type represented by the type given. Methods | Improve this Doc View Source GetPath(IConfigurationParent) Gets the path to this configuration object. Declaration public string GetPath(IConfigurationParent parent) Parameters Type Name Description IConfigurationParent parent Returns Type Description System.String A string containing the path to this configuration object. | Improve this Doc View Source GetUnderlyingType(Type) Gets the basic type represented by the type given. Declaration public static Type GetUnderlyingType(Type type) Parameters Type Name Description System.Type type The type for which to find the underlying type. Returns Type Description System.Type | Improve this Doc View Source PropertyIsNullable(Type, PropertyInfo) Determines whether a property can be set to null . Declaration public static bool PropertyIsNullable(Type implementingType, PropertyInfo property) Parameters Type Name Description System.Type implementingType Type of the object to which the property belongs. System.Reflection.PropertyInfo property The definition of the property to examine. Returns Type Description System.Boolean Exceptions Type Condition System.ArgumentException implementingType must be the type which defines property."
  },
  "api/OpenCollar.Extensions.Configuration.PathAttribute.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PathAttribute.html",
    "title": "Class PathAttribute | API Documentation",
    "keywords": "Class PathAttribute Defines an attribute used to indicate the path to the configuration value(s) underlying a class or individual property. Inheritance System.Object System.Attribute PathAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class PathAttribute : Attribute Constructors | Improve this Doc View Source PathAttribute(PathIs, String) Initializes a new instance of the PathAttribute class. Declaration public PathAttribute(PathIs usage, string path) Parameters Type Name Description PathIs usage The usage. System.String path The path. Exceptions Type Condition System.ArgumentException path must contain a valid path or fragment of a path. System.ArgumentOutOfRangeException usage does not contain a valid value. See Also System.Attribute"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationDictionary-1.html",
    "title": "Interface IConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Interface IConfigurationDictionary<TElement> Defines a dictionary containing configuration items and keyed on the element name. Inherited Members System.Collections.Generic.IDictionary<System.String, TElement>.Add(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.ContainsKey(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.Remove(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.TryGetValue(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Item[System.String] System.Collections.Generic.IDictionary<System.String, TElement>.Keys System.Collections.Generic.IDictionary<System.String, TElement>.Values System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Add(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Clear() System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Contains(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, TElement>[], System.Int32) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Remove(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Count System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.IsReadOnly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationDictionary<TElement> : IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable, INotifyCollectionChanged Type Parameters Name Description TElement The type of the elements contained in the dictionary. Methods | Improve this Doc View Source AddCopy(String, TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration TElement AddCopy(string key, TElement value) Parameters Type Name Description System.String key The key identifying the value to add. TElement value The value to copy. Returns Type Description TElement The newly added element. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew(String) Adds a new value with the key specified, returning the new value. Declaration TElement AddNew(string key) Parameters Type Name Description System.String key The key identifying the value to add. Returns Type Description TElement The newly added element. | Improve this Doc View Source Contains(TElement) Determines whether this dictionary contains the element specified. Declaration bool Contains(TElement element) Parameters Type Name Description TElement element The element for which to check. Returns Type Description System.Boolean true if the dictionary contains the specified element; otherwise, false . See Also System.Collections.Generic.IDictionary <TKey, TValue>"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationObjectBase-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationObjectBase-1.html",
    "title": "Class ConfigurationObjectBase<TInterface> | API Documentation",
    "keywords": "Class ConfigurationObjectBase<TInterface> A base class that allows configuration from classes in the Microsoft.Extensions.Configuration namespace to be to be accessed through a user-defined model with strongly typed interfaces. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationObjectBase ConfigurationObjectBase<TInterface> Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild System.IEquatable <TInterface> Inherited Members ConfigurationObjectBase.PropertiesByName ConfigurationObjectBase.IsDirty ConfigurationObjectBase.IsReadOnly ConfigurationObjectBase.PropertyDef ConfigurationObjectBase.Values ConfigurationObjectBase.Item[String] ConfigurationObjectBase.Delete() ConfigurationObjectBase.GetPath() ConfigurationObjectBase.Load() ConfigurationObjectBase.Save() ConfigurationObjectBase.SetParent(IConfigurationParent) ConfigurationObjectBase.ToString() ConfigurationObjectBase.IValueChanged.OnValueChanged(IValue, IValue) ConfigurationObjectBase.Dispose(Boolean) NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public abstract class ConfigurationObjectBase<TInterface> : ConfigurationObjectBase, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild, IEquatable<TInterface> Type Parameters Name Description TInterface The type of the configuration interface implemented. Remarks For each requested model only a single instance of the model is ever constructed for a given Microsoft.Extensions.Configuration.IConfigurationSection or Microsoft.Extensions.Configuration.IConfigurationRoot . The System.ComponentModel.INotifyPropertyChanged interface is supported allowing changes to be detected and reported from both the underlying configuration source (through the source changed event) and from detected changes made to properties with a setter. Only material changes are reported, and change with no practical impact (for example assigning a new instance of a string with the same value) will not be reported. Constructors | Improve this Doc View Source ConfigurationObjectBase(IConfigurationRoot, IConfigurationParent) Initializes a new instance of the ConfigurationObjectBase<TInterface> class. This is the interface used when creating the root instance for the service collection. Declaration protected ConfigurationObjectBase(IConfigurationRoot configurationRoot, IConfigurationParent parent) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root from which to read and write values. IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. Properties | Improve this Doc View Source InterfaceType Gets the type of the interface implemented by this object. Declaration protected override Type InterfaceType { get; } Property Value Type Description System.Type The type of the interface implemented by this object. Overrides ConfigurationObjectBase.InterfaceType Methods | Improve this Doc View Source Equals(TInterface) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TInterface other) Parameters Type Name Description TInterface other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild System.IEquatable<T> See Also Disposable IConfigurationObject IConfigurationObject"
  },
  "api/OpenCollar.Extensions.Configuration.DefaultValueAttribute.html": {
    "href": "api/OpenCollar.Extensions.Configuration.DefaultValueAttribute.html",
    "title": "Class DefaultValueAttribute | API Documentation",
    "keywords": "Class DefaultValueAttribute An attribute that can be used to specify the default value to return if no value is defined in the configuration root. Inheritance System.Object System.Attribute DefaultValueAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class DefaultValueAttribute : Attribute Constructors | Improve this Doc View Source DefaultValueAttribute(Object) Initializes a new instance of the DefaultValueAttribute class. Declaration public DefaultValueAttribute(object defaultValue) Parameters Type Name Description System.Object defaultValue The default value to return if no value is defined in the configuration root. Can be null . Properties | Improve this Doc View Source DefaultValue Gets the default value. Declaration public object DefaultValue { get; } Property Value Type Description System.Object The default value to return if no value is defined in the configuration root. Can be null . See Also System.Attribute"
  },
  "api/OpenCollar.Extensions.Configuration.Collections.ConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.ConfigurationCollection-1.html",
    "title": "Class ConfigurationCollection<TElement> | API Documentation",
    "keywords": "Class ConfigurationCollection<TElement> A collection of IConfigurationObject that notifies when an element is added or removed. Inheritance System.Object Disposable NotifyPropertyChanged ConfigurationDictionaryBase < System.Int32 , TElement> ConfigurationCollection<TElement> Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild IConfigurationCollection <TElement> System.Collections.Generic.IList <TElement> System.Collections.Generic.ICollection <TElement> System.Collections.Generic.IEnumerable <TElement> System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged Inherited Members ConfigurationDictionaryBase<Int32, TElement>.CollectionChanged ConfigurationDictionaryBase<Int32, TElement>.Count ConfigurationDictionaryBase<Int32, TElement>.IsDirty ConfigurationDictionaryBase<Int32, TElement>.IsReadOnly ConfigurationDictionaryBase<Int32, TElement>.Keys ConfigurationDictionaryBase<Int32, TElement>.PropertyDef ConfigurationDictionaryBase<Int32, TElement>.Values ConfigurationDictionaryBase<Int32, TElement>.InnerCount ConfigurationDictionaryBase<Int32, TElement>.InnerIsReadOnly ConfigurationDictionaryBase<Int32, TElement>.Lock ConfigurationDictionaryBase<Int32, TElement>.OrderedItems ConfigurationDictionaryBase<Int32, TElement>.Item[Int32] ConfigurationDictionaryBase<Int32, TElement>.AddCopy(Int32, TElement) ConfigurationDictionaryBase<Int32, TElement>.Clear() ConfigurationDictionaryBase<Int32, TElement>.ContainsKey(Int32) ConfigurationDictionaryBase<Int32, TElement>.Delete() ConfigurationDictionaryBase<Int32, TElement>.GetPath() ConfigurationDictionaryBase<Int32, TElement>.Load() ConfigurationDictionaryBase<Int32, TElement>.OnValueChanged(IValue, IValue) ConfigurationDictionaryBase<Int32, TElement>.Remove(Int32) ConfigurationDictionaryBase<Int32, TElement>.Remove(TElement) ConfigurationDictionaryBase<Int32, TElement>.Save() ConfigurationDictionaryBase<Int32, TElement>.SetParent(IConfigurationParent) ConfigurationDictionaryBase<Int32, TElement>.TryGetValue(Int32, TElement) ConfigurationDictionaryBase<Int32, TElement>.IEnumerable.GetEnumerator() ConfigurationDictionaryBase<Int32, TElement>.GetIndexedElements(IEnumerable<TElement>) ConfigurationDictionaryBase<Int32, TElement>.Add(Int32, TElement) ConfigurationDictionaryBase<Int32, TElement>.AddNew(Int32) ConfigurationDictionaryBase<Int32, TElement>.ContainsValue(TElement) ConfigurationDictionaryBase<Int32, TElement>.DisableCollectionChangedEvents() ConfigurationDictionaryBase<Int32, TElement>.Dispose(Boolean) ConfigurationDictionaryBase<Int32, TElement>.EnableCollectionChangedEvents() ConfigurationDictionaryBase<Int32, TElement>.InnerCopyTo(KeyValuePair<Int32, Element<Int32, TElement>>[], Int32) ConfigurationDictionaryBase<Int32, TElement>.OnCollectionChanged(NotifyCollectionChangedEventArgs) ConfigurationDictionaryBase<Int32, TElement>.ReIndex(Int32, Func<Int32, Element<Int32, TElement>, Int32>) ConfigurationDictionaryBase<Int32, TElement>.Replace(IEnumerable<Element<Int32, TElement>>) NotifyPropertyChanged.PropertyChanged NotifyPropertyChanged.DisablePropertyChangedEvents() NotifyPropertyChanged.EnablePropertyChangedEvents() NotifyPropertyChanged.OnPropertyChanged(String) NotifyPropertyChanged.OnPropertyChanged<T>(String, T, T) Disposable.IsDisposed Disposable.Dispose() Disposable.Dispose(Boolean) Disposable.EnforceDisposed() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration.Collections Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class ConfigurationCollection<TElement> : ConfigurationDictionaryBase<int, TElement>, IConfigurationObject, IDisposable, INotifyPropertyChanged, IConfigurationParent, IValueChanged, IConfigurationChild, IConfigurationCollection<TElement>, IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable, INotifyCollectionChanged Type Parameters Name Description TElement The type of the element. Constructors | Improve this Doc View Source ConfigurationCollection(IConfigurationParent, PropertyDef, IConfigurationRoot, TElement[]) Initializes a new instance of the ConfigurationCollection<TElement> class. Declaration public ConfigurationCollection(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, params TElement[] elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. TElement[] elements A parameter array containing the elements with which to initialize to the collection. | Improve this Doc View Source ConfigurationCollection(IConfigurationParent, PropertyDef, IConfigurationRoot, IEnumerable<TElement>) Initializes a new instance of the ConfigurationCollection<TElement> class. Declaration public ConfigurationCollection(IConfigurationParent parent, PropertyDef propertyDef, IConfigurationRoot configurationRoot, IEnumerable<TElement> elements) Parameters Type Name Description IConfigurationParent parent The parent object to which this one belongs. null if this is a root object. PropertyDef propertyDef The definition of the property defined by this object. Microsoft.Extensions.Configuration.IConfigurationRoot configurationRoot The configuration root service from which values are read or to which all values will be written. System.Collections.Generic.IEnumerable <TElement> elements The elements with which to initialize to the collection. Properties | Improve this Doc View Source InnerIsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration protected override bool InnerIsReadOnly { get; } Property Value Type Description System.Boolean true if this collection is read-only; otherwise, false . Overrides OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<System.Int32, TElement>.InnerIsReadOnly | Improve this Doc View Source Item[Int32] Gets or sets the TElement at the specified index. Declaration public TElement this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the item to get or set. Property Value Type Description TElement The TElement at the index specified. Methods | Improve this Doc View Source Add(TElement) Adds the specified item to the end of the collection.. Declaration public void Add(TElement item) Parameters Type Name Description TElement item The item to add. | Improve this Doc View Source AddCopy(TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration public TElement AddCopy(TElement value) Parameters Type Name Description TElement value The value to copy. Returns Type Description TElement The newly added element. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew() Adds a new value with the key specified, returning the new value. Declaration public TElement AddNew() Returns Type Description TElement The newly added element. | Improve this Doc View Source Contains(TElement) Determines whether this instance contains the object. Declaration public bool Contains(TElement item) Parameters Type Name Description TElement item The item for which to check. Returns Type Description System.Boolean true if the collection contains the specified item; otherwise, false . | Improve this Doc View Source CopyTo(TElement[], Int32) Copies the contents of the collection to an array. Declaration public void CopyTo(TElement[] array, int arrayIndex) Parameters Type Name Description TElement[] array The array to which to copy the contents of the collection. System.Int32 arrayIndex The index of the first location in the array to which to copy the collection contents. Exceptions Type Condition System.ArgumentOutOfRangeException arrayIndex must be at least zero. or array is not large enough to hold the contents of this collection (if data is copied to the location specified by arrayIndex . | Improve this Doc View Source GetEnumerator() Gets the enumerator for the values in this collection. Declaration public IEnumerator<TElement> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TElement> The enumerator for the values in this collection. | Improve this Doc View Source IndexOf(TElement) Finds the index of the first element in the collection that equals the item provided. Declaration public int IndexOf(TElement item) Parameters Type Name Description TElement item The item to find. Returns Type Description System.Int32 The zero-based index of the first matching item or a value less than zero if no match is found. | Improve this Doc View Source Insert(Int32, TElement) Inserts an item at the specified index. Declaration public void Insert(int index, TElement item) Parameters Type Name Description System.Int32 index The zero-based index of the location at which the item should be inserted. TElement item The item to insert. | Improve this Doc View Source InsertCopy(Int32, TElement) Inserts an item at the specified index. Declaration public TElement InsertCopy(int index, TElement item) Parameters Type Name Description System.Int32 index The zero-based index of the location at which the item should be inserted. TElement item The item to insert. Returns Type Description TElement | Improve this Doc View Source Remove(TElement) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public override bool Remove(TElement item) Parameters Type Name Description TElement item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false . This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Overrides OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<System.Int32, TElement>.Remove(TElement) | Improve this Doc View Source Remove(Int32) Removes the element with the specified key from the System.Collections.Generic.IDictionary<TKey, TValue> . Declaration public override bool Remove(int index) Parameters Type Name Description System.Int32 index The zero-based index of the element to remove. Returns Type Description System.Boolean true if the element is successfully removed; otherwise, false . This method also returns false if index was not found in the original System.Collections.Generic.IDictionary<TKey, TValue> . Overrides OpenCollar.Extensions.Configuration.Collections.ConfigurationDictionaryBase<System.Int32, TElement>.Remove(System.Int32) | Improve this Doc View Source RemoveAt(Int32) Removes the item at the zero-based index specified. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The index of the item to remove. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements IConfigurationObject System.IDisposable System.ComponentModel.INotifyPropertyChanged IConfigurationParent IValueChanged IConfigurationChild IConfigurationCollection<TElement> System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged See Also ConfigurationDictionaryBase <TKey, TElement> IConfigurationCollection <TElement>"
  },
  "api/OpenCollar.Extensions.Configuration.html": {
    "href": "api/OpenCollar.Extensions.Configuration.html",
    "title": "Namespace OpenCollar.Extensions.Configuration | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Configuration Classes ConfigurationException An exception thrown when an error occurs during the reading or writing of configuration. ConfigurationObjectBase A base class that allows configuration from classes in the Microsoft.Extensions.Configuration namespace to be to be accessed through a user-defined model with strongly typed interfaces. ConfigurationObjectBase<TInterface> A base class that allows configuration from classes in the Microsoft.Extensions.Configuration namespace to be to be accessed through a user-defined model with strongly typed interfaces. ConfigurationObjectComparer A comparer for objects that implement interfaces derived from IConfigurationObject . DefaultValueAttribute An attribute that can be used to specify the default value to return if no value is defined in the configuration root. Disposable A base class for disposable objects. Implementation The details of the implementation of a property or element. NotifyPropertyChanged A base class providing an implementation of the System.ComponentModel.INotifyPropertyChanged interface (and the System.IDisposable interface. PathAttribute Defines an attribute used to indicate the path to the configuration value(s) underlying a class or individual property. PropertyDef The definition of a property of a configuration object. ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection type allowing configuration objects to be registered. TypeMismatchException An exception thrown when an object of the wrong type is added to a collection or assigned to a property. UniversalComparer Support for comparison. ValueBase<TParent, TValue> A class used to represent a property on an interface and its location in the configuration model. Interfaces IConfigurationChild Defines the interface common to a objects that may belong to a configuration object. IConfigurationCollection<TElement> Represents a collection of values stored in a property. IConfigurationDictionary<TElement> Defines a dictionary containing configuration items and keyed on the element name. IConfigurationObject The interface from which all configuration objects are derived. IConfigurationParent The interface common to all objects that can be parents to others. IValue The interface internally exposed by value objects. IValueChanged The interface used internally to allow values to call back to their parents to signal that a value has changed. Enums ImplementationKind Defines the way in which the value returned by a property is implemented. PathIs An enumeration of the ways in which the string supplied to the PathAttribute attribute can be used to create a full path."
  },
  "api/OpenCollar.Extensions.Configuration.Collections.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Collections.html",
    "title": "Namespace OpenCollar.Extensions.Configuration.Collections | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Configuration.Collections Classes ConfigurationCollection<TElement> A collection of IConfigurationObject that notifies when an element is added or removed. ConfigurationDictionary<TElement> A dictionary of configuration objects, keyed on the name of the object. ConfigurationDictionaryBase<TKey, TElement> A base class provide the functionality used by both dictionaries and collections. Element<TKey, TValue> A class used to represent a property on an interface and its location in the configuration model. ReadOnlyConfigurationCollection<TElement> A read-only collection of IConfigurationObject that notifies when an element is added or removed. ReadOnlyConfigurationDictionary<TElement> A read-only dictionary of configuration objects, keyed on the name of the object."
  },
  "api/OpenCollar.Extensions.Configuration.Disposable.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Disposable.html",
    "title": "Class Disposable | API Documentation",
    "keywords": "Class Disposable A base class for disposable objects. Inheritance System.Object Disposable NotifyPropertyChanged Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public abstract class Disposable : IDisposable Properties | Improve this Doc View Source IsDisposed Gets a value indicating whether this instance has been disposed of. Declaration protected bool IsDisposed { get; } Property Value Type Description System.Boolean true if this instance is has been disposed of; otherwise, false . Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source EnforceDisposed() Throws an System.ObjectDisposedException if this object has been disposed of. Declaration protected void EnforceDisposed() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. Implements System.IDisposable See Also System.IDisposable"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationParent.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationParent.html",
    "title": "Interface IConfigurationParent | API Documentation",
    "keywords": "Interface IConfigurationParent The interface common to all objects that can be parents to others. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationParent Properties | Improve this Doc View Source IsReadOnly Gets a value indicating whether this container is read-only. Declaration bool IsReadOnly { get; } Property Value Type Description System.Boolean true if this container is read-only; otherwise, false . Methods | Improve this Doc View Source GetPath() Gets the path to this configuration object. Declaration string GetPath() Returns Type Description System.String A string containing the path to this configuration object."
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationObject.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationObject.html",
    "title": "Interface IConfigurationObject | API Documentation",
    "keywords": "Interface IConfigurationObject The interface from which all configuration objects are derived. Inherited Members System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged IConfigurationParent.IsReadOnly IConfigurationParent.GetPath() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationObject : IDisposable, INotifyPropertyChanged, IConfigurationParent Properties | Improve this Doc View Source IsDirty Gets a value indicating whether this object has any properties with unsaved changes. Declaration bool IsDirty { get; } Property Value Type Description System.Boolean true if this object has any properties with unsaved changes; otherwise, false . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source PropertyDef Gets the definition of this property object. Declaration PropertyDef PropertyDef { get; } Property Value Type Description PropertyDef The definition of this property object. Methods | Improve this Doc View Source Delete() Recursively deletes all of the properties from the configuration sources. Declaration void Delete() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Load() Loads all of the properties from the configuration sources, overwriting any unsaved changes. Declaration void Load() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Save() Saves this current values for each property back to the configuration sources. Declaration void Save() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of."
  }
}