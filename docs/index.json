{
  "usage/persist.html": {
    "href": "usage/persist.html",
    "title": "Persistence | API Documentation",
    "keywords": "Persistence All configuration values are loaded on when the object is created. Configuration reload events are subscribed to, and any change to properties are reported using Events such as property changed and collection changed. To determine whether there any unsaved changes check the IsDirty propery. Save Changed made to properties and collections are not commited to the underlying configuration sources until the Save method. Load Any changes made since the configuration was loaded can reloaded using the Load method. Delete At any time a node and it's children can be removed from the underlying configuration provider using the Delete method."
  },
  "usage/control.html": {
    "href": "usage/control.html",
    "title": "Fine Control | API Documentation",
    "keywords": "Fine Control Fine control over properties is provided by two attributes: ConfigurationAttribute - basic control over default value, loading and saving. PathAttribute - the naming and path to the underlying configuration key. Configuration Attribute The Configuration attribute is used to control default values and whether values are loaded or saved. DefaultValue - For properties that are not required to have a value in the configuration provider a default value can be set here. If no value is set a ConfigurationException will be thrown. Persistence - This property can be used to control whether values are loaded or saved. The available options are defined by the ConfigurationPersistenceActions enum. The actions available are: Name Description Ignore Values will be neither loaded nor saved. LoadAndSave Values are loaded from the configuration service and changes are saved back to the configuration service. This is the default behavior. LoadOnly Values are loaded from the configuration service, but changes are never saved back to the configuration service. SaveOnly Values are never loaded from the configuration service, but changes are saved back to the configuration service. Path Attribute The Path attribute allows the location of the configuration value to be determined. There are two values defined in the ConfigurationPersistenceActions that can be assigned: Name Description Root The path is treated as a root and any previous context is ignored. This allows a completely arbitrary path to be used. Suffix The path is treated as a suffix to be applied (as part of colon delimited list) to the existing path context. This is the default behavior."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.Configuration | API Documentation",
    "keywords": "OpenCollar.Extensions.Configuration Support for automatic validation, update and strongly-typed access to configuration. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Configuration/"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions.Configuration | API Documentation",
    "keywords": "OpenCollar.Extensions.Configuration Support for automatic validation, update and strongly-typed access to configuration. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Configuration/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage The primary purpose of the libarary is to provide a strongly typed, validated wrapper around the values exposed as key/value pairs by configuration providers in the Microsoft.Extensions.Configuration library. The starting point is to define an interface through which to read your configuration. The interface must derive from IConfigurationObject . The interfaces must be public. For example: public interface IEnvironment : IConfigurationObject { public string EnvironmentName { get; } public string Version { get; } } public interface IMyConfig : IConfigurationObject { public IEnvironment Environment { get; } public string ReadOnlyString { get; } public string ReadWriteString { get; } } The next step is to register the interface as a service in Startup.cs . At the same time the IConfigurationRoot object for the application must also be registered as a service. public class Startup { private readonly IConfigurationRoot _configuration; public Startup(IConfiguration configuration) { // Capture the configuration object passed in when the application is started. _configuration = (IConfigurationRoot)configuration; } public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddSingleton(_configuration); services.AddConfigurationReader<IMyConfig>(); } ... } Later, when needed the configuration reader will be available as a service: public MyConstructor(IMyConfig config) { var version = config.Environment.Version; } Events Any object returned implements the INotifyPropertyChanged interface, allowing for changes to properties (whether from the underlying configuration or from property changes made by code) to be detected. Similary collections and dictionaries implement the INotifyCollectionChanged interface, similarly allowing changes to be detected, regardless of origin. Attributes Fine control over properties is provided by three attributes: ConfigurationAttribute - basic control over default value, loading and saving. PathAttribute - the naming and path to the underlying configuration key."
  },
  "usage/props.html": {
    "href": "usage/props.html",
    "title": "Properties | API Documentation",
    "keywords": "Properties The starting point is to define an interface through which to read your configuration. The interface must derive from IConfigurationObject . The interfaces must be public. For example: public interface IEnvironment : IConfigurationObject { public string EnvironmentName { get; } public string Version { get; } } public interface IMyConfig : IConfigurationObject { public IEnvironment Environment { get; } public string ReadOnlyString { get; } public string ReadWriteString { get; } } Read-only To make properties read-only then define only a getter. To change the readability of collections and dictionaries different interfaces are available. Read-Only Collections To make a collection read-only use the IReadOnlyConfigurationCollection interface. Read-Only Dictionaries To make a collection read-only use the IReadOnlyConfigurationDictionary interface. Configuration Object Values A configuration object is automatically generated for any property with a type derived from IConfigurationObject ."
  },
  "usage/json.html": {
    "href": "usage/json.html",
    "title": "JSON Serialization | API Documentation",
    "keywords": "JSON Serialization The following example shows how to use the System.Text.Json serializer to convert any configuration object into JSON. // Create serializer (with dictionary converter). var serializerOptions = new JsonSerializerOptions { Converters = { new ConfigurationDictionaryConverterFactory() } }; var jsonString = JsonSerializer.Serialize(myConfigObject, serializerOptions); Until #31007 is fixed in CoreFX we must manually add the converter when constructing the serializer. The correct attributes have been applied to the properties and classes involved, but are not currently used as they should be."
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide a strongly typed, validated wrapper around the values exposed as key/value pairs by configuration providers in the Microsoft.Extensions.Configuration library. The starting point is to define an interface through which to read your configuration. The interface must derive from IConfigurationObject . The interfaces must be public. For example: public interface IEnvironment : IConfigurationObject { public string EnvironmentName { get; } public string Version { get; } } public interface IMyConfig : IConfigurationObject { public IEnvironment Environment { get; } public string ReadOnlyString { get; } public string ReadWriteString { get; } } The next step is to register the interface as a service in Startup.cs . At the same time the IConfigurationRoot object for the application must also be registered as a service. public class Startup { private readonly IConfigurationRoot _configuration; public Startup(IConfiguration configuration) { // Capture the configuration object passed in when the application is started. _configuration = (IConfigurationRoot)configuration; } public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddSingleton(_configuration); services.AddConfigurationReader<IMyConfig>(); } ... } Later, when needed, the configuration reader is available as a service: public MyConstructor(IMyConfig config) { var version = config.Environment.Version; } Events Any object returned implements the INotifyPropertyChanged interface, allowing for changes to properties (whether from the underlying configuration or from property changes made by code) to be detected. Similary collections and dictionaries implement the INotifyCollectionChanged interface, similarly allowing changes to be detected, regardless of origin. See \" Events \" for a more detailed review of the events and when they are raised. Fine Contol Fine control over properties is provided by three attributes: ConfigurationAttribute - basic control over default value, loading and saving. PathAttribute - the naming and path to the underlying configuration key. The \" Fine Control \" article looks in more depth at how attributes can be used to control the way in which configuration data is used."
  },
  "usage/events.html": {
    "href": "usage/events.html",
    "title": "Events | API Documentation",
    "keywords": "Events Any object returned implements the INotifyPropertyChanged interface, allowing for changes to properties (whether from the underlying configuration or from property changes made by code) to be detected. In addition, collections and dictionaries implement the INotifyCollectionChanged interface, similarly allowing changes to be detected, regardless of origin. Property Change Events Property change are detected using the PropertyChanged event. A typical example looks like this: public MyConstructor(IMyConfig config) { config.PropertyChanged += OnConfigPropertyChanged; } private OnConfigPropertyChanged(object sender, PropertyChangedEventArgs arg) { if(args.Name == \"Environment\") { // Do something here... } } Collection Change Events Collection and dictionary changes are detected using the CollectionChanged event. A typical example looks like this: public MyConstructor(IMyConfig config) { config.ConnectionStrings.CollectionChanged += OnConnectionStringsChanged; } private OnConnectionStringsChanged(object sender, NotifyCollectionChangedEventArgs arg) { if(args.Action == NotifyCollectionChangedAction.Add) { // Do something here... } }"
  },
  "usage/types.html": {
    "href": "usage/types.html",
    "title": "Collections, Dictionaries and Object | API Documentation",
    "keywords": "Collections, Dictionaries and Object Configuration Objects Configuration objects are used to represent simple configuration in the form of an object hierarchy. Collections Collections are configuration objects that represents lists of the configuration objects or naive values of the same type. Values are identified by index. Dictionaries Dictionaries are configuration objects represents lists of the configuration objects or naive values of the same type. Values are referenced by name. \"Naive\" Types Any type not derived from IConfigurationObject is considered \"naive\" and will be serialized as a single value."
  },
  "api/OpenCollar.Extensions.Configuration.ServiceCollectionExtensions.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | API Documentation",
    "keywords": "Class ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection type allowing configuration objects to be registered. Inheritance System.Object ServiceCollectionExtensions Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public static class ServiceCollectionExtensions Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples The starting point is to define an interface through which to read your configuration. The interface must derive from IConfigurationObject . The interfaces must be public. See th example below. public interface IEnvironment : IConfigurationObject { public string EnvironmentName { get; } public string Version { get; } } public interface IMyConfig : IConfigurationObject { public IEnvironment Environment { get; } public string ReadOnlyString { get; } public string ReadWriteString { get; } } The next step is to register the interface as a service in Startup.cs . At the same time the IConfigurationRoot object for the application must also be registered as a service. public class Startup { private readonly IConfigurationRoot _configuration; public Startup(IConfiguration configuration) { // Capture the configuration object passed in when the application is started. _configuration = (IConfigurationRoot)configuration; } public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddSingleton(_configuration); services.AddConfigurationReader<IMyConfig>(); } ... } Later, when needed, the configuration reader is available as a service: public MyConstructor(IMyConfig config) { var version = config.Environment.Version; } Methods | Improve this Doc View Source AddConfigurationReader<TConfigurationObject>(IServiceCollection) Add a new kind of configuration reader that represents values taken directly from the Microsoft.Extensions.Configuration.IConfigurationRoot object in the service collection. Declaration public static void AddConfigurationReader<TConfigurationObject>(this IServiceCollection serviceCollection) where TConfigurationObject : IConfigurationObject Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to which to add the configuration reader. This must not be null . Type Parameters Name Description TConfigurationObject The interface through which consumers will access the configuration. This must be derived from the IConfigurationObject interface."
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationDictionary-1.html",
    "title": "Interface IConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Interface IConfigurationDictionary<TElement> Represents a dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. Inherited Members System.Collections.Generic.IDictionary<System.String, TElement>.Add(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.ContainsKey(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.Remove(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.TryGetValue(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Item[System.String] System.Collections.Generic.IDictionary<System.String, TElement>.Keys System.Collections.Generic.IDictionary<System.String, TElement>.Values System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Add(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Clear() System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Contains(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, TElement>[], System.Int32) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Remove(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Count System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.IsReadOnly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationDictionary<TElement> : IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged Type Parameters Name Description TElement The type of the dictionary element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IConfigurationDictionary<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": { \"First\": \"Value 1\", \"Second\": \"Value 2\", \"Third\": \"Value 3\" } } Methods | Improve this Doc View Source AddCopy(String, TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration TElement AddCopy(string key, TElement value) Parameters Type Name Description System.String key The key identifying the value to add. TElement value The value to copy. Returns Type Description TElement The newly added element. If this element is derived from IConfigurationObject , IConfigurationCollection<TElement> or IConfigurationDictionary<TElement> , and the object given was not created by this library, then a new object will be created and they properties and elements in the object given will be copied. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew(String) Adds a new value with the key specified, returning the new value. Declaration TElement AddNew(string key) Parameters Type Name Description System.String key The key identifying the value to add. Returns Type Description TElement Remarks This allows instances of the internal implementation of objects to be created and added to the collection, and returned to be populated. | Improve this Doc View Source Contains(TElement) Determines whether this dictionary contains the element specified. Declaration bool Contains(TElement element) Parameters Type Name Description TElement element The element for which to check. Returns Type Description System.Boolean true if the dictionary contains the specified element; otherwise, false . See Also System.Collections.Generic.IDictionary <TKey, TValue> System.Collections.Specialized.INotifyCollectionChanged IConfigurationObject"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationPersistenceActions.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationPersistenceActions.html",
    "title": "Enum ConfigurationPersistenceActions | API Documentation",
    "keywords": "Enum ConfigurationPersistenceActions Defines the behavior when loading or saving the value for any particular property. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [Flags] public enum ConfigurationPersistenceActions Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description Ignore Values will be neither loaded nor saved. This effectively means the property is never persisted and is plain writeable property on the class. LoadAndSave Values are loaded from the configuration service and changes are saved back to the configuration service. LoadOnly Values are loaded from the configuration service, but changes are never saved back to the configuration service. SaveOnly Values are never loaded from the configuration service, but changes are saved back to the configuration service. See Also ConfigurationAttribute"
  },
  "api/OpenCollar.Extensions.Configuration.Converters.ConfigurationDictionaryConverter-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.ConfigurationDictionaryConverter-1.html",
    "title": "Class ConfigurationDictionaryConverter<TElement> | API Documentation",
    "keywords": "Class ConfigurationDictionaryConverter<TElement> A converter allowing IConfigurationDictionary<TElement> derived objects to be serialized and deserialized as JSON objects. Inheritance System.Object System.Text.Json.Serialization.JsonConverter System.Text.Json.Serialization.JsonConverter < IConfigurationDictionary <TElement>> ConfigurationDictionaryConverter<TElement> Inherited Members System.Text.Json.Serialization.JsonConverter<OpenCollar.Extensions.Configuration.IConfigurationDictionary<TElement>>.CanConvert(System.Type) Namespace : OpenCollar.Extensions.Configuration.Converters Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class ConfigurationDictionaryConverter<TElement> : JsonConverter<IConfigurationDictionary<TElement>> Type Parameters Name Description TElement The type of the element. Constructors | Improve this Doc View Source ConfigurationDictionaryConverter(JsonSerializerOptions) Initializes a new instance of the ConfigurationDictionaryConverter<TElement> class. Declaration public ConfigurationDictionaryConverter(JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.JsonSerializerOptions options The options controlling the serialization/deserialization. Methods | Improve this Doc View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T . Declaration public override IConfigurationDictionary<TElement> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.Utf8JsonReader reader The reader from which to take JSON elements. System.Type typeToConvert The type to convert. System.Text.Json.JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description IConfigurationDictionary <TElement> The converted value. Overrides System.Text.Json.Serialization.JsonConverter<OpenCollar.Extensions.Configuration.IConfigurationDictionary<TElement>>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) Exceptions Type Condition System.Text.Json.JsonException Unable to convert &quot;{propertyName}&quot; to Enum &quot;{_keyType}&quot;. or | Improve this Doc View Source Write(Utf8JsonWriter, IConfigurationDictionary<TElement>, JsonSerializerOptions) Writes the specifiedvalue to the writer given. Declaration public override void Write(Utf8JsonWriter writer, IConfigurationDictionary<TElement> dictionary, JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.Utf8JsonWriter writer The JSON writer with which to record data. IConfigurationDictionary <TElement> dictionary The dictionary from which to read data. System.Text.Json.JsonSerializerOptions options The options govenerning how the JSON is to be formatted. Overrides System.Text.Json.Serialization.JsonConverter<OpenCollar.Extensions.Configuration.IConfigurationDictionary<TElement>>.Write(System.Text.Json.Utf8JsonWriter, OpenCollar.Extensions.Configuration.IConfigurationDictionary<TElement>, System.Text.Json.JsonSerializerOptions) See Also System.Text.Json.Serialization.JsonConverter <T>"
  },
  "api/OpenCollar.Extensions.Configuration.PathAttribute.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PathAttribute.html",
    "title": "Class PathAttribute | API Documentation",
    "keywords": "Class PathAttribute Defines an attribute used to indicate the path to the configuration value(s) underlying a class or individual property. Inheritance System.Object System.Attribute PathAttribute Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public sealed class PathAttribute : Attribute Remarks The usage and path arguments of the constructor can be used to determine whether this property is read from a path relative to the parent or from an absolute path. The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the following example the attribute is used to define a path that is always absolute. [Path(PathIs.Absolute, \"ConfigurationStrings:Database\")] string DatabaseConnectionString { get; set; } Constructors | Improve this Doc View Source PathAttribute(PathIs, String) Initializes a new instance of the PathAttribute class. Declaration public PathAttribute(PathIs usage, string path) Parameters Type Name Description PathIs usage The usage. System.String path The path. Exceptions Type Condition System.ArgumentException path must contain a valid path or fragment of a path. System.ArgumentOutOfRangeException usage does not contain a valid value. See Also System.Attribute PathIs"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationException.html",
    "title": "Class ConfigurationException | API Documentation",
    "keywords": "Class ConfigurationException An exception thrown when an error occurs during the reading or writing of configuration. Inheritance System.Object System.Exception ConfigurationException TypeMismatchException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [Serializable] public class ConfigurationException : Exception, ISerializable Remarks Use the ConfigurationPath property to discover the path to the configuration item concerned. The following UML has been generated directly from the source code using Jebbs PlantUML . Constructors | Improve this Doc View Source ConfigurationException() Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException() | Improve this Doc View Source ConfigurationException(SerializationInfo, StreamingContext) Initializes a new instance of the ConfigurationException class. Declaration protected ConfigurationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source ConfigurationException(String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source ConfigurationException(String, String) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string configurationPath, string message) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The message that describes the error. | Improve this Doc View Source ConfigurationException(String, String, Exception) Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException(string configurationPath, string message, Exception innerException) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Properties | Improve this Doc View Source ConfigurationPath Gets or sets the path to the configuration affected. Declaration public string ConfigurationPath { get; set; } Property Value Type Description System.String The path to the configuration affected. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.PathIs.html": {
    "href": "api/OpenCollar.Extensions.Configuration.PathIs.html",
    "title": "Enum PathIs | API Documentation",
    "keywords": "Enum PathIs An enumeration of the ways in which the string supplied to the PathAttribute attribute can be used to create a full path. Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public enum PathIs Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description Absolute The path is treated as a root and any previous context is ignored. Relative The path is treated as a suffix to be applied (as part of colon delimited list) to the existing path context. Root Obsolete. The path is treated as a root and any previous context is ignored. Suffix Obsolete. The path is treated as a suffix to be applied (as part of colon delimited list) to the existing path context. Unknown The usage of the path is unknown or undefined. Use of this value will usually result in an error; it is provided to as sentinel to detect accidental usages. See Also PathAttribute"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationObject.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationObject.html",
    "title": "Interface IConfigurationObject | API Documentation",
    "keywords": "Interface IConfigurationObject The interface from which all configuration objects are derived. Inherited Members System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationObject : IDisposable, INotifyPropertyChanged Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Properties | Improve this Doc View Source IsDirty Gets a value indicating whether this object has any properties with unsaved changes. Declaration bool IsDirty { get; } Property Value Type Description System.Boolean true if this object has any properties with unsaved changes; otherwise, false . Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. Methods | Improve this Doc View Source Delete() Recursively deletes all of the persisted properties from the configuration sources. Declaration void Delete() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Load() Loads all of the properties from the configuration sources, overwriting any unsaved changes. Declaration void Load() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of. | Improve this Doc View Source Save() Saves this current values for each property back to the configuration sources. Declaration void Save() Exceptions Type Condition System.ObjectDisposedException This method cannot be used after the object has been disposed of."
  },
  "api/OpenCollar.Extensions.Configuration.html": {
    "href": "api/OpenCollar.Extensions.Configuration.html",
    "title": "Namespace OpenCollar.Extensions.Configuration | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Configuration Classes ConfigurationAttribute An attribute that can be used to specify the default value to return if no value is defined in the configuration root. ConfigurationException An exception thrown when an error occurs during the reading or writing of configuration. ConfigurationObjectComparer A comparer for objects that implement interfaces derived from IConfigurationObject . InvalidPropertyException An exception thrown when a property is incorrectly defined.. PathAttribute Defines an attribute used to indicate the path to the configuration value(s) underlying a class or individual property. ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection type allowing configuration objects to be registered. TypeMismatchException An exception thrown when an object of the wrong type is added to a collection or assigned to a property. Interfaces IConfigurationCollection<TElement> Represents a collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. IConfigurationDictionary<TElement> Represents a dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. IConfigurationObject The interface from which all configuration objects are derived. IReadOnlyConfigurationCollection<TElement> Represents a read-only collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. Items cannot be added or removed. IReadOnlyConfigurationDictionary<TElement> Represents a read-only dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. Items cannot be added or removed. Enums ConfigurationPersistenceActions Defines the behavior when loading or saving the value for any particular property. PathIs An enumeration of the ways in which the string supplied to the PathAttribute attribute can be used to create a full path."
  },
  "api/OpenCollar.Extensions.Configuration.Converters.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.html",
    "title": "Namespace OpenCollar.Extensions.Configuration.Converters | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Configuration.Converters Classes ConfigurationDictionaryConverter<TElement> A converter allowing IConfigurationDictionary<TElement> derived objects to be serialized and deserialized as JSON objects. ConfigurationDictionaryConverterFactory A factory that produces converters allowing objects implementing IConfigurationDictionary<TElement> to be converted to and from JSON format."
  },
  "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationDictionary-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationDictionary-1.html",
    "title": "Interface IReadOnlyConfigurationDictionary<TElement> | API Documentation",
    "keywords": "Interface IReadOnlyConfigurationDictionary<TElement> Represents a read-only dictionary of values stored in a property, keyed against a string value. Use the interface for properties representing an arbitrary number of the same kind of object identified by unique string keys. Items cannot be added or removed. Inherited Members IConfigurationDictionary<TElement>.AddCopy(String, TElement) IConfigurationDictionary<TElement>.AddNew(String) IConfigurationDictionary<TElement>.Contains(TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Add(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.ContainsKey(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.Remove(System.String) System.Collections.Generic.IDictionary<System.String, TElement>.TryGetValue(System.String, TElement) System.Collections.Generic.IDictionary<System.String, TElement>.Item[System.String] System.Collections.Generic.IDictionary<System.String, TElement>.Keys System.Collections.Generic.IDictionary<System.String, TElement>.Values System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Add(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Clear() System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Contains(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, TElement>[], System.Int32) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Remove(System.Collections.Generic.KeyValuePair<System.String, TElement>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.Count System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, TElement>>.IsReadOnly System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, TElement>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IReadOnlyConfigurationDictionary<TElement> : IConfigurationDictionary<TElement>, IDictionary<string, TElement>, ICollection<KeyValuePair<string, TElement>>, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged, IReadOnlyDictionary<string, TElement>, IReadOnlyCollection<KeyValuePair<string, TElement>>, IEnumerable<KeyValuePair<string, TElement>>, IEnumerable Type Parameters Name Description TElement The type of the dictionary element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IConfigurationDictionary<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": { \"First\": \"Value 1\", \"Second\": \"Value 2\", \"Third\": \"Value 3\" } } See Also System.Collections.Generic.IReadOnlyDictionary`2 IConfigurationDictionary <TElement>"
  },
  "api/OpenCollar.Extensions.Configuration.InvalidPropertyException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.InvalidPropertyException.html",
    "title": "Class InvalidPropertyException | API Documentation",
    "keywords": "Class InvalidPropertyException An exception thrown when a property is incorrectly defined.. Inheritance System.Object System.Exception InvalidPropertyException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [Serializable] public class InvalidPropertyException : Exception, ISerializable Remarks Use the PropertyName property to discover the name of the property concerned. The following UML has been generated directly from the source code using Jebbs PlantUML . Constructors | Improve this Doc View Source InvalidPropertyException() Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException() | Improve this Doc View Source InvalidPropertyException(SerializationInfo, StreamingContext) Initializes a new instance of the InvalidPropertyException class. Declaration protected InvalidPropertyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source InvalidPropertyException(String) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source InvalidPropertyException(String, Exception) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source InvalidPropertyException(String, String) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string propertyName, string message) Parameters Type Name Description System.String propertyName The property name and parent type name of the property affected. System.String message The message that describes the error. | Improve this Doc View Source InvalidPropertyException(String, String, Exception) Initializes a new instance of the InvalidPropertyException class. Declaration public InvalidPropertyException(string propertyName, string message, Exception innerException) Parameters Type Name Description System.String propertyName The property name and parent type name of the property affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Properties | Improve this Doc View Source PropertyName Gets or sets the property name and parent type name of the property affected. Declaration public string PropertyName { get; set; } Property Value Type Description System.String The property name and parent type name of the property affected. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationObjectComparer.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationObjectComparer.html",
    "title": "Class ConfigurationObjectComparer | API Documentation",
    "keywords": "Class ConfigurationObjectComparer A comparer for objects that implement interfaces derived from IConfigurationObject . Inheritance System.Object ConfigurationObjectComparer Implements System.Collections.Generic.IEqualityComparer < IConfigurationObject > Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class ConfigurationObjectComparer : IEqualityComparer<IConfigurationObject> Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Properties | Improve this Doc View Source Instance Gets an instance of the comparer Declaration public static ConfigurationObjectComparer Instance { get; } Property Value Type Description ConfigurationObjectComparer The instance of the comparer Methods | Improve this Doc View Source Equals(IConfigurationObject, IConfigurationObject) Determines whether the specified objects are equal. Declaration public bool Equals(IConfigurationObject x, IConfigurationObject y) Parameters Type Name Description IConfigurationObject x The first object of type to compare. IConfigurationObject y The second object of type to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false . | Improve this Doc View Source GetHashCode(IConfigurationObject) Returns a hash code for this instance. Declaration public int GetHashCode(IConfigurationObject obj) Parameters Type Name Description IConfigurationObject obj The object. Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Implements System.Collections.Generic.IEqualityComparer<T> See Also System.Collections.Generic.IEqualityComparer <T>"
  },
  "api/OpenCollar.Extensions.Configuration.IConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IConfigurationCollection-1.html",
    "title": "Interface IConfigurationCollection<TElement> | API Documentation",
    "keywords": "Interface IConfigurationCollection<TElement> Represents a collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. Inherited Members System.Collections.Generic.IList<TElement>.IndexOf(TElement) System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement) System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32) System.Collections.Generic.IList<TElement>.Item[System.Int32] System.Collections.Generic.ICollection<TElement>.Add(TElement) System.Collections.Generic.ICollection<TElement>.Clear() System.Collections.Generic.ICollection<TElement>.Contains(TElement) System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[], System.Int32) System.Collections.Generic.ICollection<TElement>.Remove(TElement) System.Collections.Generic.ICollection<TElement>.Count System.Collections.Generic.ICollection<TElement>.IsReadOnly System.Collections.Generic.IEnumerable<TElement>.GetEnumerator() System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IConfigurationCollection<TElement> : IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged Type Parameters Name Description TElement The type of the collection element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IConfigurationCollection<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": [ \"Value 1\", \"Value 2\", \"Value 3\" ] } Methods | Improve this Doc View Source AddCopy(TElement) Adds a new value with the key specified, copying the properties and elements from the value give, returning the new value. Declaration TElement AddCopy(TElement value) Parameters Type Name Description TElement value The value to copy (must be compatible with the type or interface specified by TElement ). Returns Type Description TElement The newly added element. If this element is derived from IConfigurationObject , IConfigurationCollection<TElement> or IConfigurationDictionary<TElement> , and the object given was not created by this library, then a new object will be created and they properties and elements in the object given will be copied. Remarks Used to add objects and collections that have been constructed externally using alternate implementations. | Improve this Doc View Source AddNew() Adds a new value with the key specified, returning the newly created object. Declaration TElement AddNew() Returns Type Description TElement The newly added element. Remarks This allows instances of the internal implementation of objects to be created and added to the collection, and returned to be populated. See Also System.Collections.Generic.IList <T> System.Collections.Specialized.INotifyCollectionChanged IConfigurationObject"
  },
  "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationCollection-1.html": {
    "href": "api/OpenCollar.Extensions.Configuration.IReadOnlyConfigurationCollection-1.html",
    "title": "Interface IReadOnlyConfigurationCollection<TElement> | API Documentation",
    "keywords": "Interface IReadOnlyConfigurationCollection<TElement> Represents a read-only collection of values stored in a property. Use the interface for properties representing an arbitrary number of the same kind of object identified by index. Items cannot be added or removed. Inherited Members IConfigurationCollection<TElement>.AddCopy(TElement) IConfigurationCollection<TElement>.AddNew() System.Collections.Generic.IList<TElement>.IndexOf(TElement) System.Collections.Generic.IList<TElement>.Insert(System.Int32, TElement) System.Collections.Generic.IList<TElement>.RemoveAt(System.Int32) System.Collections.Generic.IList<TElement>.Item[System.Int32] System.Collections.Generic.ICollection<TElement>.Add(TElement) System.Collections.Generic.ICollection<TElement>.Clear() System.Collections.Generic.ICollection<TElement>.Contains(TElement) System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[], System.Int32) System.Collections.Generic.ICollection<TElement>.Remove(TElement) System.Collections.Generic.ICollection<TElement>.Count System.Collections.Generic.ICollection<TElement>.IsReadOnly System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged IConfigurationObject.IsDirty IConfigurationObject.Delete() IConfigurationObject.Load() IConfigurationObject.Save() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.Collections.Generic.IEnumerable<TElement>.GetEnumerator() Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax public interface IReadOnlyConfigurationCollection<TElement> : IConfigurationCollection<TElement>, IList<TElement>, ICollection<TElement>, INotifyCollectionChanged, IConfigurationObject, IDisposable, INotifyPropertyChanged, IReadOnlyCollection<TElement>, IEnumerable<TElement>, IEnumerable Type Parameters Name Description TElement The type of the collection element. This must be nullable if the type is a reference type and can be null . Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined as containing an arbitray number of strings. IReadOnlyConfigurationCollection<string> Names { get; set; } If the configuration is specified in a JSON configuration file it would look something like this: { \"Names\": [ \"Value 1\", \"Value 2\", \"Value 3\" ] } See Also System.Collections.Generic.IReadOnlyCollection`1 IConfigurationCollection <TElement>"
  },
  "api/OpenCollar.Extensions.Configuration.TypeMismatchException.html": {
    "href": "api/OpenCollar.Extensions.Configuration.TypeMismatchException.html",
    "title": "Class TypeMismatchException | API Documentation",
    "keywords": "Class TypeMismatchException An exception thrown when an object of the wrong type is added to a collection or assigned to a property. Inheritance System.Object System.Exception ConfigurationException TypeMismatchException Implements System.Runtime.Serialization.ISerializable Inherited Members ConfigurationException.ConfigurationPath ConfigurationException.GetObjectData(SerializationInfo, StreamingContext) Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [Serializable] public class TypeMismatchException : ConfigurationException, ISerializable Remarks Use the ConfigurationPath property to discover the path to the configuration item concerned. The following UML has been generated directly from the source code using Jebbs PlantUML . Constructors | Improve this Doc View Source TypeMismatchException() Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException() | Improve this Doc View Source TypeMismatchException(SerializationInfo, StreamingContext) Initializes a new instance of the TypeMismatchException class. Declaration protected TypeMismatchException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source TypeMismatchException(String) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source TypeMismatchException(String, Exception) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source TypeMismatchException(String, String) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string configurationPath, string message) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The message that describes the error. | Improve this Doc View Source TypeMismatchException(String, String, Exception) Initializes a new instance of the TypeMismatchException class. Declaration public TypeMismatchException(string configurationPath, string message, Exception innerException) Parameters Type Name Description System.String configurationPath The path to the configuration affected. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.Configuration.ConfigurationAttribute.html": {
    "href": "api/OpenCollar.Extensions.Configuration.ConfigurationAttribute.html",
    "title": "Class ConfigurationAttribute | API Documentation",
    "keywords": "Class ConfigurationAttribute An attribute that can be used to specify the default value to return if no value is defined in the configuration root. Inheritance System.Object System.Attribute ConfigurationAttribute Namespace : OpenCollar.Extensions.Configuration Assembly : OpenCollar.Extensions.Configuration.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ConfigurationAttribute : Attribute Remarks Use the DefaultValue property of this attribute to manage the default value for configuration items that do not require and underlying setting. The Persistence property of this attribute can be used to control whether values are read or written to and from the underlying configuration source. The following UML has been generated directly from the source code using Jebbs PlantUML . Examples In the example below a property on an interface is defined with a default value, meaning that a value will be set, and no error will be thrown, even if there is no value in the underlying configuration service. In this case the result is a property that will be set to \"DEFAULT\" if no name is specified in configuration file. [Configuration(DefaultValue = \"DEFAULT\")] string Name { get; set; } In the following example the attribute is used to define the way in which a property is persisted. The value will be loaded from the configuration file, but never saved back to the file. This allows the application to change the value for all consumers of the interface, but it will never be changed in the file. [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly)] string InitialValue { get; set; } Constructors | Improve this Doc View Source ConfigurationAttribute() Initializes a new instance of the ConfigurationAttribute class. Declaration public ConfigurationAttribute() Properties | Improve this Doc View Source DefaultValue Gets the default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object The default value to return if no value is defined in the configuration root. Can be null . | Improve this Doc View Source Persistence Gets or sets the policy for when to load and save values from the configuration service. Declaration public ConfigurationPersistenceActions Persistence { get; set; } Property Value Type Description ConfigurationPersistenceActions The policy for when to load and save values from the configuration service. See Also System.Attribute ConfigurationPersistenceActions"
  },
  "api/OpenCollar.Extensions.Configuration.Converters.ConfigurationDictionaryConverterFactory.html": {
    "href": "api/OpenCollar.Extensions.Configuration.Converters.ConfigurationDictionaryConverterFactory.html",
    "title": "Class ConfigurationDictionaryConverterFactory | API Documentation",
    "keywords": "Class ConfigurationDictionaryConverterFactory A factory that produces converters allowing objects implementing IConfigurationDictionary<TElement> to be converted to and from JSON format. Inheritance System.Object System.Text.Json.Serialization.JsonConverter System.Text.Json.Serialization.JsonConverterFactory ConfigurationDictionaryConverterFactory Namespace : OpenCollar.Extensions.Configuration.Converters Assembly : OpenCollar.Extensions.Configuration.dll Syntax public class ConfigurationDictionaryConverterFactory : JsonConverterFactory Methods | Improve this Doc View Source CanConvert(Type) When overridden in a derived class, determines whether the converter instance can convert the specified object type. Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description System.Type typeToConvert The type of the object to check whether it can be converted by this converter instance. Returns Type Description System.Boolean true if the instance can convert the specified object type; otherwise, false . Overrides System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type) | Improve this Doc View Source CreateConverter(Type, JsonSerializerOptions) Creates the converter for the type specified. Declaration public override JsonConverter CreateConverter(Type type, JsonSerializerOptions options) Parameters Type Name Description System.Type type The type to convert. System.Text.Json.JsonSerializerOptions options The options controlling the conversion. Returns Type Description System.Text.Json.Serialization.JsonConverter A JSON converter for the type given. Overrides System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type, System.Text.Json.JsonSerializerOptions) See Also System.Text.Json.Serialization.JsonConverterFactory"
  }
}